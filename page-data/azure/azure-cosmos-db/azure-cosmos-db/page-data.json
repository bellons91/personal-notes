{
    "componentChunkName": "component---node-modules-gatsby-theme-kb-src-templates-topic-js",
    "path": "/azure/azure-cosmos-db/azure-cosmos-db",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"azure, cloud, azure-certifications/az204, azure-cosmos-db\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Azure Cosmos DB\"), mdx(\"p\", null, \"Azure Cosmos DB is a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"fully managed NoSQL database\"), \" designed to provide low latency, elastic scalability of throughput, well-defined semantics for data consistency, and high availability.\"), mdx(\"p\", null, \"You can configure your databases to be globally distributed and available in any of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/azure-region\",\n    \"title\": \"azure-region\"\n  }, \"[[azure-region]]\"), \". To lower the latency, place the data close to where your users are.\"), mdx(\"p\", null, \"It uses \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"multi-master replication protocol\"), \", meaning that all regions support both reads and writes. Multi-master replication protocol provides some functionalities:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Unlimited elastic write and read scalability.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"99.999% read and write availability all around the world.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Guaranteed reads and writes served in less than 10 milliseconds at the 99th \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/percentile\",\n    \"title\": \"percentile\"\n  }, \"[[percentile]]\"), \".\")), mdx(\"p\", null, \"However, you can configure it to have only one region enabled for writing.\"), mdx(\"p\", null, \"Your application can perform near \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"real-time reads and writes against all the regions\"), \" you chose for your database. Azure Cosmos DB internally handles the data replication between regions with consistency level guarantees of the level you've selected.\"), mdx(\"p\", null, \"To use CosmoDB you have to create a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/azure-cosmos-db-account\",\n    \"title\": \"azure-cosmos-db-account\"\n  }, \"[[azure-cosmos-db-account]]\"), \". Every account can have one or more \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/azure-cosmos-db-database\",\n    \"title\": \"azure-cosmos-db-database\"\n  }, \"[[azure-cosmos-db-database]]\"), \", each containing one or more \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/azure-cosmos-db-container\",\n    \"title\": \"azure-cosmos-db-container\"\n  }, \"[[azure-cosmos-db-container]]\"), \". Each container then is a collection of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/azure-cosmos-db-item\",\n    \"title\": \"azure-cosmos-db-item\"\n  }, \"[[azure-cosmos-db-item]]\"), \".\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/personal-notes/86d6020d7d540b88605b5dd815c6f7ea/cosmosdb-resources-hierarchy.png\",\n    \"alt\": \"CosmosDB Hierarcy\"\n  })), mdx(\"p\", null, \"For each account you can define its \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/azure-cosmos-db-consistency-levels\",\n    \"title\": \"azure-cosmos-db-consistency-levels\"\n  }, \"[[azure-cosmos-db-consistency-levels]]\"), \".\"), mdx(\"p\", null, \"With Azure Cosmos DB, you pay for the throughput you provision and the storage you consume on an hourly basis. Throughput must be provisioned to ensure that sufficient system resources are available for your Azure Cosmos database always. DB operations are expressed in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/azure-cosmos-db-request-units\",\n    \"title\": \"azure-cosmos-db-request-units\"\n  }, \"[[azure-cosmos-db-request-units]]\"), \".\"), mdx(\"p\", null, \"Azure Cosmos DB encryption protects your data at rest by seamlessly encrypting your data as it's written in our datacenters, and automatically decrypting it for you as you access it.\"), mdx(\"h2\", null, \"Backup\"), mdx(\"p\", null, \"You can define backup policies for your data.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Periodic\"), \": backup is taked at periodic intervals, based on configuration.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Continuous\"), \": provides a backup window of 7 or 30 days. You can restore data available at any moment in that specific time window.\")), mdx(\"p\", null, \"Backup can be stored redundantly, using either Local-redundant storage or Geo-redundant storage.\"), mdx(\"h2\", null, \"Available APIs\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"NoSQL\"), \": data is stored in document format. \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"It's the default API\"), \". It supports querying using SQL syntax.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"MongoDB\"), \": data is stored in documents using BSON format.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"PostgreSQL\"), \": allows for distributed tables. Data is stored either on a single node or in a multi-node configuration.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"\", mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"/apache-cassandra\",\n    \"title\": \"apache-cassandra\"\n  }, \"[[apache-cassandra]]\"), \"\"), \": data is stored in a \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"column-oriented schema\"), \". Good for large volumes of data.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Apache Gremlin\"), \": creates graphs where data is stored as edges and vertices.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Table\"), \": it stores data in \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"key/value format\"), \". If you're currently using Azure Table storage, you may see some limitations in latency, scaling, throughput, global distribution, index management, low query performance. API for Table overcomes these limitations and it's recommended to migrate your app if you want to use the benefits of Azure Cosmos DB. API for Table only supports \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/OLTP\",\n    \"title\": \"OLTP\"\n  }, \"[[OLTP]]\"), \" scenarios.\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"tableOfContents":{"items":[{"url":"#azure-cosmos-db","title":"Azure Cosmos DB","items":[{"url":"#backup","title":"Backup"},{"url":"#available-apis","title":"Available APIs"}]}]},"outboundReferences":[{"contextLine":"You can configure your databases to be globally distributed and available in any of the [[azure-region]]. To lower the latency, place the data close to where your users are.","targetAnchor":null,"refWord":"azure-region","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"azure, azure-certifications/az900\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Azure Regions\"), mdx(\"p\", null, \"A region is a geographical area on the planet that contains one or more datacenters that are nearby and networked together with a low-latency network.\"), mdx(\"p\", null, \"Some features are only available in certain regions.\"), mdx(\"p\", null, \"Some other services are not bound to a specific region because they are worldwide; examples are Azure Active Directory, Azure DNS, and Azure Traffic Manager.\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"d0f73437-04db-515a-a0fa-f190496bc22b","fields":{"slug":"/azure/azure-region","title":"Azure Regions"}}}},{"contextLine":"To use CosmoDB you have to create a [[azure-cosmos-db-account]]. Every account can have one or more [[azure-cosmos-db-database]], each containing one or more [[azure-cosmos-db-container]]. Each container then is a collection of [[azure-cosmos-db-item]].","targetAnchor":null,"refWord":"azure-cosmos-db-account","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"azure, cloud, azure-certifications/az204, azure-cosmos-db\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Azure Cosmos DB Account\"), mdx(\"p\", null, \"The Azure Cosmos DB account is the fundamental unit of global distribution and high availability.\\nYour Azure Cosmos DB account contains a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"unique DNS name\"), \".\"), mdx(\"p\", null, \"You can create a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"maximum of 50 Azure Cosmos DB accounts under an Azure subscription\"), \" (this is a soft limit that can be increased via support request).\"), mdx(\"p\", null, \"After you create an account under your Azure subscription, you can manage the data in your account by creating databases, containers, and items.\"), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/azure-cosmos-db-consistency-levels\",\n    \"title\": \"azure-cosmos-db-consistency-levels\"\n  }, \"[[azure-cosmos-db-consistency-levels]]\"), \" are defined for the whole Account.\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"01e2f3cb-45bc-5eb0-95a3-cb3ac3a16e14","fields":{"slug":"/azure/azure-cosmos-db/azure-cosmos-db-account","title":"Azure Cosmos DB Account"}}}},{"contextLine":"To use CosmoDB you have to create a [[azure-cosmos-db-account]]. Every account can have one or more [[azure-cosmos-db-database]], each containing one or more [[azure-cosmos-db-container]]. Each container then is a collection of [[azure-cosmos-db-item]].","targetAnchor":null,"refWord":"azure-cosmos-db-database","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"azure, cloud, azure-certifications/az204, azure-cosmos-db\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Azure Cosmos DB Database\"), mdx(\"p\", null, \"You can create one or multiple Azure Cosmos DB databases under your account.\"), mdx(\"p\", null, \"A database is analogous to a namespace.\"), mdx(\"p\", null, \"A database is the unit of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"management\"), \" for a set of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/azure-cosmos-db-container\",\n    \"title\": \"azure-cosmos-db-container\"\n  }, \"[[azure-cosmos-db-container]]\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"303036b5-98f9-5277-93fe-3fb96d928b7a","fields":{"slug":"/azure/azure-cosmos-db/azure-cosmos-db-database","title":"Azure Cosmos DB Database"}}}},{"contextLine":"To use CosmoDB you have to create a [[azure-cosmos-db-account]]. Every account can have one or more [[azure-cosmos-db-database]], each containing one or more [[azure-cosmos-db-container]]. Each container then is a collection of [[azure-cosmos-db-item]].","targetAnchor":null,"refWord":"azure-cosmos-db-container","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"azure, cloud, azure-certifications/az204, azure-cosmos-db\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Azure CosmosDB Container\"), mdx(\"p\", null, \"An Azure Cosmos DB container is the fundamental unit of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"scalability\"), \".\"), mdx(\"p\", null, \"You can virtually have an unlimited provisioned throughput (RU/s) and storage on a container.\"), mdx(\"p\", null, \"Azure Cosmos DB transparently partitions your container using the logical \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/partition-key\",\n    \"title\": \"partition key\"\n  }, \"[[partition key]]\"), \" that you specify in order to elastically scale your provisioned throughput and storage. Containers are \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"horizontally partitioned\"), \", and data is replicated across multiple regions.\"), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/azure-cosmos-db-item\",\n    \"title\": \"azure-cosmos-db-item\"\n  }, \"[[azure-cosmos-db-item]]\"), \" that you add to the container are automatically grouped into logical partitions, which are distributed across physical partitions, based on the partition key. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The throughput on a container is evenly distributed across the physical partitions\"), \".\"), mdx(\"p\", null, \"When you create a container, you configure throughput in one of the following modes:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Dedicated provisioned throughput mode\"), \": The throughput provisioned on a container is exclusively reserved for that container and it's backed by the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/SLAs\",\n    \"title\": \"SLAs\"\n  }, \"[[SLAs]]\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Shared provisioned throughput mode\"), \": These containers share the provisioned throughput with the other containers in the same database (excluding containers that have been configured with dedicated provisioned throughput). In other words, the provisioned throughput on the database is shared among all the \\u201Cshared throughput\\u201D containers.\"))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"A container is a schema-agnostic container of items\"), \". Items in a container can have arbitrary schemas.\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"d38d5ce6-b91d-54ed-9bf6-b95fdbeac35a","fields":{"slug":"/azure/azure-cosmos-db/azure-cosmos-db-container","title":"Azure CosmosDB Container"}}}},{"contextLine":"To use CosmoDB you have to create a [[azure-cosmos-db-account]]. Every account can have one or more [[azure-cosmos-db-database]], each containing one or more [[azure-cosmos-db-container]]. Each container then is a collection of [[azure-cosmos-db-item]].","targetAnchor":null,"refWord":"azure-cosmos-db-item","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"azure, cloud, azure-certifications/az204, azure-cosmos-db\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Azure CosmosDB Item\"), mdx(\"p\", null, \"An Azure Cosmos DB item can represent either a document in a collection, a row in a table, or a node or edge in a graph. It all depends on the API you are using.\"), mdx(\"p\", null, \"Items can have arbitrary schemas in the same container, and they are indexed automatically without using explicit indexes.\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"c19bfb24-b62c-586b-a863-4aca69b38e6d","fields":{"slug":"/azure/azure-cosmos-db/azure-cosmos-db-item","title":"Azure CosmosDB Item"}}}},{"contextLine":"For each account you can define its [[azure-cosmos-db-consistency-levels]].","targetAnchor":null,"refWord":"azure-cosmos-db-consistency-levels","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"azure, cloud, azure-certifications/az204, azure-cosmos-db\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Azure CosmosDB Consistency levels\"), mdx(\"p\", null, \"Azure Cosmos DB approaches data consistency as a spectrum of choices instead of two extremes.\"), mdx(\"p\", null, \"Strong consistency and eventual consistency are at the ends of the spectrum, but there are many consistency choices along the spectrum.\"), mdx(\"p\", null, \"Developers can use these options to make precise choices and granular tradeoffs with respect to high availability and performance. There are five consistency levels:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Strong\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Bounded staleness\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Session\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Consistent prefix\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Eventual\")), mdx(\"p\", null, \"The weaker is the consistency, the higher are the availability and throughput. Also, latency becomes lower.\"), mdx(\"p\", null, \"Consistency levels are region-agnostic and guaranteed for all operations. The default consistency level configured on your account applies to all Azure Cosmos DB databases and containers under that account.\"), mdx(\"p\", null, \"Read consistency applies to a single read operation scoped within a partition-key range or a logical partition.\"), mdx(\"p\", null, \"Azure Cosmos DB \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"guarantees that 100% of read requests meet the consistency guarantee\"), \" for the consistency level chosen. The definition of the consistency levels uses the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/TLA+-specification-language\",\n    \"title\": \"TLA+ specification language\"\n  }, \"[[TLA+ specification language]]\"), \".\"), mdx(\"h2\", null, \"Strong Consistency\"), mdx(\"p\", null, \"Strong consistency offers a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"linearizability guarantee\"), \".\"), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Linearizability\",\n    \"title\": \"Linearizability\"\n  }, \"[[Linearizability]]\"), \" refers to serving requests concurrently. The reads are guaranteed to return the most recent committed version of an item.\"), mdx(\"p\", null, \"A client never sees an uncommitted or partial write.\"), mdx(\"p\", null, \"Users are always guaranteed to read the latest committed write.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/personal-notes/c292dab52688f6f7580331dc9e00cd96/strong-consistency.png\",\n    \"alt\": \"Strong Consistency\"\n  })), mdx(\"h2\", null, \"Bounded staleness consistency\"), mdx(\"p\", null, \"In bounded staleness consistency, the reads are guaranteed to honor the consistent-prefix guarantee.\"), mdx(\"p\", null, \"The reads might lag behind writes by at most \\\"K\\\" versions (that is, \\\"updates\\\") of an item or by \\\"T\\\" time interval, whichever is reached first. In other words, when you choose bounded staleness, the \\\"staleness\\\" can be configured in two ways:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The number of versions (K) of the item\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The time interval (T) reads might lag behind the writes\")), mdx(\"p\", null, \"For a single region account, the minimum value of K and T is 10 write operations or 5 seconds. For multi-region accounts the minimum value of K and T is 100,000 write operations or 300 seconds.\"), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Che-succede-se-ci-sono-piu-di-10-write-negli-ultimi-5-secondi-Si-perde-la-consistency\",\n    \"title\": \"Che succede se ci sono più di 10 write negli ultimi 5 secondi? Si perde la consistency?\"\n  }, \"[[Che succede se ci sono pi\\xF9 di 10 write negli ultimi 5 secondi? Si perde la consistency?]]\"), \"\"), mdx(\"p\", null, \"Bounded staleness consistency is most frequently chosen by globally distributed applications expecting low write latencies but total global order guarantees.\"), mdx(\"p\", null, \"Unlike strong consistency which is scoped to a single region, you can choose bounded staleness consistency with any number of read regions (along with a write region). Bounded staleness is great for applications featuring group collaboration and sharing, stock ticker, publish-subscribe/queueing etc\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/personal-notes/bb27c913830c203734eae1de9c7f57ec/bounded-staleness-consistency.png\",\n    \"alt\": \"Bounded staleness consistency\"\n  })), mdx(\"h2\", null, \"Session consistency\"), mdx(\"p\", null, \"In session consistency, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"within a single client session\"), \" reads are guaranteed to honor the consistent-prefix, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/monotonic-reads\",\n    \"title\": \"monotonic reads\"\n  }, \"[[monotonic reads]]\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/monotonic-writes\",\n    \"title\": \"monotonic writes\"\n  }, \"[[monotonic writes]]\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/read-your-writes\",\n    \"title\": \"read-your-writes\"\n  }, \"[[read-your-writes]]\"), \", and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/write-follows-reads\",\n    \"title\": \"write-follows-reads\"\n  }, \"[[write-follows-reads]]\"), \" guarantees.\"), mdx(\"p\", null, \"This assumes a single \\\"writer\\\" session or sharing the session token for multiple writers.\"), mdx(\"p\", null, \"This is the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"default consistency level\"), \".\"), mdx(\"p\", null, \"It provides write latencies, availability and read throughput comparable to that of eventual consistency but also provides the consistency guarantees that suit the needs of applications written to operate in the context of a user.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/personal-notes/f64a4a0dbd1d99a7d8cbcdcb0f3ffbb2/session-consistency.png\",\n    \"alt\": \"Session consistency\"\n  })), mdx(\"h2\", null, \"Consistent prefix consistency\"), mdx(\"p\", null, \"Updates made as single document writes see eventual consistency.\"), mdx(\"p\", null, \"Updates made as a batch within a transaction, are returned consistent to the transaction in which they were committed.\"), mdx(\"p\", null, \"Write operations within a transaction of multiple documents are always visible together.\"), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Chiarisci!\",\n    \"title\": \"Chiarisci!\"\n  }, \"[[Chiarisci!]]\"), \"\"), mdx(\"p\", null, \"Assume two write operations are performed on documents Doc 1 and Doc 2, within transactions T1 and T2. When client does a read in any replica, the user sees either \\u201CDoc 1 v1 and Doc 2 v1\\u201D or \\u201CDoc 1 v2 and Doc 2 v2\\u201D, but never \\u201CDoc 1 v1 and Doc 2 v2\\u201D or \\u201CDoc 1 v2 and Doc 2 v1\\u201D for the same read or query operation.\"), mdx(\"p\", null, \"If writes were performed in the order \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A, B, C\"), \", then a client sees either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A,B\"), \", or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A,B,C\"), \", but never out of order like \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A,C\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B,A,C\"), \".\"), mdx(\"p\", null, \"Consistent Prefix provides write latencies, availability and read throughput comparable to that of eventual consistency, but also \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"provides the order guarantees\"), \" that suit the needs of scenarios where order is important.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/personal-notes/2c060b170de9ae4f7e6074a6f44c90ee/consistent-prefix-consistency.png\",\n    \"alt\": \"Consistent prefix consistency\"\n  })), mdx(\"h2\", null, \"Eventual consistency\"), mdx(\"p\", null, \"In eventual consistency, there's no ordering guarantee for reads. In the absence of any further writes, the replicas eventually converge.\"), mdx(\"p\", null, \"Eventual consistency is the weakest form of consistency because \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"a client may read the values that are older than the ones it read before\"), \".\"), mdx(\"p\", null, \"Eventual consistency is ideal where the application doesn't require any ordering guarantees. Examples include count of Retweets, Likes, or nonthreaded comments.\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/personal-notes/3ea21dfe72a30a1b609a8ebb604895fa/eventual-consistency.png\",\n    \"alt\": \"Eventual consistency\"\n  })), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"aggiungi%20https://en.wikipedia.org/wiki/Consistency_model\",\n    \"title\": \"aggiungi https://en.wikipedia.org/wiki/Consistency_model\"\n  }, \"[[aggiungi https://en.wikipedia.org/wiki/Consistency_model]]\"), \"\"), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://learn.microsoft.com/en-gb/azure/cosmos-db/consistency-levels\",\n    \"title\": \"https://learn.microsoft.com/en-gb/azure/cosmos-db/consistency-levels\"\n  }, \"[[https://learn.microsoft.com/en-gb/azure/cosmos-db/consistency-levels]]\"), \"\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"a7be7c34-a914-57d1-b1ac-41931b9b8532","fields":{"slug":"/azure/azure-cosmos-db/azure-cosmos-db-consistency-levels","title":"Azure CosmosDB Consistency levels"}}}},{"contextLine":"With Azure Cosmos DB, you pay for the throughput you provision and the storage you consume on an hourly basis. Throughput must be provisioned to ensure that sufficient system resources are available for your Azure Cosmos database always. DB operations are expressed in [[azure-cosmos-db-request-units]].","targetAnchor":null,"refWord":"azure-cosmos-db-request-units","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"azure, cloud, azure-certifications/az204, azure-cosmos-db\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Azure CosmosDB Request Units\"), mdx(\"p\", null, \" A request unit represents the system resources such as \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/CPU\",\n    \"title\": \"CPU\"\n  }, \"[[CPU]]\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/IOPS\",\n    \"title\": \"IOPS\"\n  }, \"[[IOPS]]\"), \", and memory that are required to perform the database operations supported by Azure Cosmos DB.\"), mdx(\"p\", null, \"The cost to do a point read, which is fetching a single item by its ID \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"and\"), \" partition key value, for a 1-KB item is 1RU.\"), mdx(\"p\", null, \"The type of Azure Cosmos DB account you're using determines the way consumed RUs get charged. There are three modes in which you can create an account:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Provisioned throughput mode\"), \": you provision the number of RUs for your application on a per-second basis in increments of \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"100 RUs per second\"), \". To scale the provisioned throughput for your application, you can increase or decrease the number of RUs at any time in increments or decrements of 100 RUs. \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"You can provision throughput at container and database\"), \" granularity level.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Serverless mode\"), \": you don't have to provision any throughput when creating resources in your Azure Cosmos DB account. At the end of your billing period, you get billed for the number of request units that have been consumed by your database operations. \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"With serverless mode you cannot use multiple regions\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Autoscale mode\"), \": ou can automatically and instantly scale the throughput (RU/s) of your database or container based on its usage.\")), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://learn.microsoft.com/en-gb/azure/cosmos-db/throughput-serverless\"\n  }, \"Read more\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"251d6459-d4cf-520a-b71d-2b92d71cbe90","fields":{"slug":"/azure/azure-cosmos-db/azure-cosmos-db-request-units","title":"Azure CosmosDB Request Units"}}}},{"contextLine":"- **[[apache-cassandra]]**: data is stored in a **column-oriented schema**. Good for large volumes of data.","targetAnchor":null,"refWord":"apache-cassandra","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"type\": \"basic-note\",\n  \"foam_template\": {\n    \"filepath\": \"./general/apache-cassandra.md\"\n  },\n  \"tags\": null\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Apache Cassandra\"), mdx(\"p\", null, \"Data is stored in column-oriented schema.\"), mdx(\"p\", null, \"Apache Cassandra offers a highly distributed, horizontally scaling approach to storing \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"large volumes of data\"), \" while offering a flexible approach to a column-oriented schema.\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"7be84ad5-07bd-5faa-a05c-b481328666a8","fields":{"slug":"/general/apache-cassandra","title":"Apache Cassandra"}}}}],"inboundReferences":[{"contextLine":"Now these tables can be used in [[azure-cosmos-db]].","referrer":{"parent":{"id":"8189119f-689a-560b-b6d0-105166ea6f73","fields":{"slug":"/azure/azure-storage-account/azure-table-storage","title":"Azure Table Storage"}}}},{"contextLine":"- [[azure-cosmos-db]]","referrer":{"parent":{"id":"054932f3-ea86-5292-9b43-2c04a7a196ec","fields":{"slug":"/azure-certifications/az-204","title":"AZ-204 - Developing Solutions for Microsoft Azure"}}}}]},"fields":{"slug":"/azure/azure-cosmos-db/azure-cosmos-db","title":"Azure Cosmos DB"}}},"pageContext":{"id":"d175696a-d7db-598b-a54a-460b2f402b9b","refWordMdxSlugDict":{"azure-region":"azure/azure-region","azure-cosmos-db-account":"azure/azure-cosmos-db/azure-cosmos-db-account","azure-cosmos-db-consistency-levels":"azure/azure-cosmos-db/azure-cosmos-db-consistency-levels","azure-cosmos-db-database":"azure/azure-cosmos-db/azure-cosmos-db-database","azure-cosmos-db-container":"azure/azure-cosmos-db/azure-cosmos-db-container","azure-cosmos-db-item":"azure/azure-cosmos-db/azure-cosmos-db-item","azure-cosmos-db-request-units":"azure/azure-cosmos-db/azure-cosmos-db-request-units","apache-cassandra":"general/apache-cassandra"},"tocTypes":["sidebar"]}},
    "staticQueryHashes": ["2221750479","2380733210","2768355698","63159454","847517413"]}