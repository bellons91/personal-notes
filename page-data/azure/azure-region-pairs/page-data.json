{
    "componentChunkName": "component---node-modules-gatsby-theme-kb-src-templates-topic-js",
    "path": "/azure/azure-region-pairs",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"azure, azure-certifications/az900\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Azure Region Pairs\"), mdx(\"p\", null, \"It may happen that an event is so big that it impacts a whole \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"azure-region\",\n    \"title\": \"azure-region\"\n  }, \"[[azure-region]]\"), \". In that case, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"azure-availability-zones\",\n    \"title\": \"azure-availability-zones|Availability zones\"\n  }, \"[[azure-availability-zones|Availability zones]]\"), \" are not enough to prevent data loss and application downtime. Therefore, we need to pair regions so that one acts as a fallback for the other.\"), mdx(\"p\", null, \"Most Azure regions are paired with another region within the same geography (WestUS is paired with EastUS, for example). The minimum distance is 300 miles, so the likelihood of an event that affects both regions is small.\"), mdx(\"h2\", null, \"Advantages of Region Pairs\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If an extensive Azure outage occurs, one region out of every pair is \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"prioritized\"), \" to make sure at least one is restored as quickly as possible for applications hosted in that region pair.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Planned Azure \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"updates are rolled out to paired regions one region at a time\"), \" to minimize downtime and risk of application outage.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Data\"), \" continues to reside within the same geography as its pair for \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"tax- and law-enforcement jurisdiction purposes\"), \".\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"tableOfContents":{"items":[{"url":"#azure-region-pairs","title":"Azure Region Pairs","items":[{"url":"#advantages-of-region-pairs","title":"Advantages of Region Pairs"}]}]},"outboundReferences":[{"contextLine":"It may happen that an event is so big that it impacts a whole [[azure-region]]. In that case, [[azure-availability-zones|Availability zones]] are not enough to prevent data loss and application downtime. Therefore, we need to pair regions so that one acts as a fallback for the other.","targetAnchor":null,"refWord":"azure-region","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"azure, azure-certifications/az900\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Azure Regions\"), mdx(\"p\", null, \"A region is a geographical area on the planet that contains one or more datacenters that are nearby and networked together with a low-latency network.\"), mdx(\"p\", null, \"Some features are only available in certain regions.\"), mdx(\"p\", null, \"Some other services are not bound to a specific region because they are worldwide; examples are Azure Active Directory, Azure DNS, and Azure Traffic Manager.\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"d0f73437-04db-515a-a0fa-f190496bc22b","fields":{"slug":"/azure/azure-region","title":"Azure Regions"}}}}],"inboundReferences":[{"contextLine":"When creating a storage account, you must select the primary region. The paired secondary region is assigned automatically, based on [[azure-region-pairs]], and cannot be changed.","referrer":{"parent":{"id":"fa3acc9f-470b-5c18-bc1e-1d2c3d18521f","fields":{"slug":"/azure/azure-storage-redundancy-types","title":"Azure Storage Redundancy Types"}}}}]},"fields":{"slug":"/azure/azure-region-pairs","title":"Azure Region Pairs"}}},"pageContext":{"id":"14618d7a-45f9-5662-93c9-91808dd7c992","refWordMdxSlugDict":{"azure-region":"azure/azure-region"},"tocTypes":["sidebar"]}},
    "staticQueryHashes": ["2221750479","2380733210","2768355698","63159454","847517413"]}