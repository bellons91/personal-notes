{
    "componentChunkName": "component---node-modules-gatsby-theme-kb-src-templates-topic-js",
    "path": "/azure/azure-cosmos-db/azure-cosmos-db-account",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"azure, cloud, azure-certifications/az204, azure-cosmos-db\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Azure Cosmos DB Account\"), mdx(\"p\", null, \"The Azure Cosmos DB account is the fundamental unit of global distribution and high availability.\\nYour Azure Cosmos DB account contains a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"unique DNS name\"), \".\"), mdx(\"p\", null, \"You can create a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"maximum of 50 Azure Cosmos DB accounts under an Azure subscription\"), \" (this is a soft limit that can be increased via support request).\"), mdx(\"p\", null, \"After you create an account under your Azure subscription, you can manage the data in your account by creating databases, containers, and items.\"), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/azure-cosmos-db-consistency-levels\",\n    \"title\": \"azure-cosmos-db-consistency-levels\"\n  }, \"[[azure-cosmos-db-consistency-levels]]\"), \" are defined for the whole Account.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"tableOfContents":{"items":[{"url":"#azure-cosmos-db-account","title":"Azure Cosmos DB Account"}]},"outboundReferences":[{"contextLine":"[[azure-cosmos-db-consistency-levels]] are defined for the whole Account.","targetAnchor":null,"refWord":"azure-cosmos-db-consistency-levels","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"azure, cloud, azure-certifications/az204, azure-cosmos-db\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Azure CosmosDB Consistency levels\"), mdx(\"p\", null, \"Azure Cosmos DB approaches data consistency as a spectrum of choices instead of two extremes.\"), mdx(\"p\", null, \"Strong consistency and eventual consistency are at the ends of the spectrum, but there are many consistency choices along the spectrum.\"), mdx(\"p\", null, \"Developers can use these options to make precise choices and granular tradeoffs with respect to high availability and performance. There are five consistency levels:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Strong\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Bounded staleness\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Session\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Consistent prefix\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Eventual\")), mdx(\"p\", null, \"The weaker is the consistency, the higher are the availability and throughput. Also, latency becomes lower.\"), mdx(\"p\", null, \"Consistency levels are region-agnostic and guaranteed for all operations. The default consistency level configured on your account applies to all Azure Cosmos DB databases and containers under that account.\"), mdx(\"p\", null, \"Read consistency applies to a single read operation scoped within a partition-key range or a logical partition.\"), mdx(\"p\", null, \"Azure Cosmos DB \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"guarantees that 100% of read requests meet the consistency guarantee\"), \" for the consistency level chosen. The definition of the consistency levels uses the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/TLA+-specification-language\",\n    \"title\": \"TLA+ specification language\"\n  }, \"[[TLA+ specification language]]\"), \".\"), mdx(\"h2\", null, \"Strong Consistency\"), mdx(\"p\", null, \"Strong consistency offers a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"linearizability guarantee\"), \".\"), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Linearizability\",\n    \"title\": \"Linearizability\"\n  }, \"[[Linearizability]]\"), \" refers to serving requests concurrently. The reads are guaranteed to return the most recent committed version of an item.\"), mdx(\"p\", null, \"A client never sees an uncommitted or partial write.\"), mdx(\"p\", null, \"Users are always guaranteed to read the latest committed write.\"), mdx(\"h2\", null, \"Bounded staleness consistency\"), mdx(\"p\", null, \"In bounded staleness consistency, the reads are guaranteed to honor the consistent-prefix guarantee.\"), mdx(\"p\", null, \"The reads might lag behind writes by at most \\\"K\\\" versions (that is, \\\"updates\\\") of an item or by \\\"T\\\" time interval, whichever is reached first. In other words, when you choose bounded staleness, the \\\"staleness\\\" can be configured in two ways:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The number of versions (K) of the item\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The time interval (T) reads might lag behind the writes\")), mdx(\"p\", null, \"For a single region account, the minimum value of K and T is 10 write operations or 5 seconds. For multi-region accounts the minimum value of K and T is 100,000 write operations or 300 seconds.\"), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Che-succede-se-ci-sono-piu-di-10-write-negli-ultimi-5-secondi-Si-perde-la-consistency\",\n    \"title\": \"Che succede se ci sono pi√π di 10 write negli ultimi 5 secondi? Si perde la consistency?\"\n  }, \"[[Che succede se ci sono pi\\xF9 di 10 write negli ultimi 5 secondi? Si perde la consistency?]]\"), \"\"), mdx(\"h2\", null, \"Session consistency\"), mdx(\"p\", null, \"In session consistency, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"within a single client session\"), \" reads are guaranteed to honor the consistent-prefix, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/monotonic-reads\",\n    \"title\": \"monotonic reads\"\n  }, \"[[monotonic reads]]\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/monotonic-writes\",\n    \"title\": \"monotonic writes\"\n  }, \"[[monotonic writes]]\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/read-your-writes\",\n    \"title\": \"read-your-writes\"\n  }, \"[[read-your-writes]]\"), \", and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/write-follows-reads\",\n    \"title\": \"write-follows-reads\"\n  }, \"[[write-follows-reads]]\"), \" guarantees.\"), mdx(\"p\", null, \"This assumes a single \\\"writer\\\" session or sharing the session token for multiple writers.\"), mdx(\"h2\", null, \"Consistent prefix consistency\"), mdx(\"p\", null, \"Updates made as single document writes see eventual consistency.\"), mdx(\"p\", null, \"Updates made as a batch within a transaction, are returned consistent to the transaction in which they were committed.\"), mdx(\"p\", null, \"Write operations within a transaction of multiple documents are always visible together.\"), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Chiarisci!\",\n    \"title\": \"Chiarisci!\"\n  }, \"[[Chiarisci!]]\"), \"\"), mdx(\"p\", null, \"Assume two write operations are performed on documents Doc 1 and Doc 2, within transactions T1 and T2. When client does a read in any replica, the user sees either \\u201CDoc 1 v1 and Doc 2 v1\\u201D or \\u201CDoc 1 v2 and Doc 2 v2\\u201D, but never \\u201CDoc 1 v1 and Doc 2 v2\\u201D or \\u201CDoc 1 v2 and Doc 2 v1\\u201D for the same read or query operation.\"), mdx(\"h2\", null, \"Eventual consistency\"), mdx(\"p\", null, \"In eventual consistency, there's no ordering guarantee for reads. In the absence of any further writes, the replicas eventually converge.\"), mdx(\"p\", null, \"Eventual consistency is the weakest form of consistency because a client may read the values that are older than the ones it read before. Eventual consistency is ideal where the application doesn't require any ordering guarantees. Examples include count of Retweets, Likes, or nonthreaded comments.\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"a7be7c34-a914-57d1-b1ac-41931b9b8532","fields":{"slug":"/azure/azure-cosmos-db/azure-cosmos-db-consistency-levels","title":"Azure CosmosDB Consistency levels"}}}}],"inboundReferences":[{"contextLine":"To use CosmoDB you have to create a [[azure-cosmos-db-account]]. Every account can have one or more [[azure-cosmos-db-database]], each containing one or more [[azure-cosmos-db-container]]. Each container then is a collection of [[azure-cosmos-db-item]].","referrer":{"parent":{"id":"d175696a-d7db-598b-a54a-460b2f402b9b","fields":{"slug":"/azure/azure-cosmos-db/azure-cosmos-db","title":"Azure Cosmos DB"}}}}]},"fields":{"slug":"/azure/azure-cosmos-db/azure-cosmos-db-account","title":"Azure Cosmos DB Account"}}},"pageContext":{"id":"01e2f3cb-45bc-5eb0-95a3-cb3ac3a16e14","refWordMdxSlugDict":{"azure-cosmos-db-consistency-levels":"azure/azure-cosmos-db/azure-cosmos-db-consistency-levels"},"tocTypes":["sidebar"]}},
    "staticQueryHashes": ["2221750479","2380733210","2768355698","63159454","847517413"]}