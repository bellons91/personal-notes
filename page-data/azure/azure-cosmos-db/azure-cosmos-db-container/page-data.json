{
    "componentChunkName": "component---node-modules-gatsby-theme-kb-src-templates-topic-js",
    "path": "/azure/azure-cosmos-db/azure-cosmos-db-container",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"azure, cloud, az-204, azure-cosmos-db\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Azure CosmosDB Container\"), mdx(\"p\", null, \"An Azure Cosmos DB container is the fundamental unit of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"scalability\"), \".\"), mdx(\"p\", null, \"You can virtually have an unlimited provisioned throughput (RU/s) and storage on a container.\"), mdx(\"p\", null, \"Azure Cosmos DB transparently partitions your container using the logical \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/partition-key\",\n    \"title\": \"partition key\"\n  }, \"[[partition key]]\"), \" that you specify in order to elastically scale your provisioned throughput and storage. Containers are \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"horizontally partitioned\"), \", and data is replicated across multiple regions.\"), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/azure-cosmos-db-item\",\n    \"title\": \"azure-cosmos-db-item\"\n  }, \"[[azure-cosmos-db-item]]\"), \" that you add to the container are automatically grouped into logical partitions, which are distributed across physical partitions, based on the partition key. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The throughput on a container is evenly distributed across the physical partitions\"), \".\"), mdx(\"p\", null, \"When you create a container, you configure throughput in one of the following modes:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Dedicated provisioned throughput mode\"), \": The throughput provisioned on a container is exclusively reserved for that container and it's backed by the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/SLAs\",\n    \"title\": \"SLAs\"\n  }, \"[[SLAs]]\"), \".\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Shared provisioned throughput mode\"), \": These containers share the provisioned throughput with the other containers in the same database (excluding containers that have been configured with dedicated provisioned throughput). In other words, the provisioned throughput on the database is shared among all the \\u201Cshared throughput\\u201D containers.\"))), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"A container is a schema-agnostic container of items\"), \". Items in a container can have arbitrary schemas.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"tableOfContents":{"items":[{"url":"#azure-cosmosdb-container","title":"Azure CosmosDB Container"}]},"outboundReferences":[{"contextLine":"The [[azure-cosmos-db-item]] that you add to the container are automatically grouped into logical partitions, which are distributed across physical partitions, based on the partition key. **The throughput on a container is evenly distributed across the physical partitions**.","targetAnchor":null,"refWord":"azure-cosmos-db-item","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"azure, cloud, az-204, azure-cosmos-db\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Azure CosmosDB Item\"), mdx(\"p\", null, \"An Azure Cosmos DB item can represent either a document in a collection, a row in a table, or a node or edge in a graph. It all depends on the API you are using.\"), mdx(\"p\", null, \"Items can have arbitrary schemas in the same container, and they are indexed automatically without using explicit indexes.\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"c19bfb24-b62c-586b-a863-4aca69b38e6d","fields":{"slug":"/azure/azure-cosmos-db/azure-cosmos-db-item","title":"Azure CosmosDB Item"}}}}],"inboundReferences":[{"contextLine":"A database is the unit of **management** for a set of [[azure-cosmos-db-container]].","referrer":{"parent":{"id":"303036b5-98f9-5277-93fe-3fb96d928b7a","fields":{"slug":"/azure/azure-cosmos-db/azure-cosmos-db-database","title":"Azure Cosmos DB Database"}}}},{"contextLine":"  - [[azure-cosmos-db-account]], [[azure-cosmos-db-container]], etc.","referrer":{"parent":{"id":"054932f3-ea86-5292-9b43-2c04a7a196ec","fields":{"slug":"/azure-certifications/az-204","title":"AZ-204 - Developing Solutions for Microsoft Azure"}}}},{"contextLine":"To use CosmoDB you have to create a [[azure-cosmos-db-account]]. Every account can have one or more [[azure-cosmos-db-database]], each containing one or more [[azure-cosmos-db-container]]. Each container then is a collection of [[azure-cosmos-db-item]].","referrer":{"parent":{"id":"d175696a-d7db-598b-a54a-460b2f402b9b","fields":{"slug":"/azure/azure-cosmos-db/azure-cosmos-db","title":"Azure Cosmos DB"}}}}]},"fields":{"slug":"/azure/azure-cosmos-db/azure-cosmos-db-container","title":"Azure CosmosDB Container"}}},"pageContext":{"id":"d38d5ce6-b91d-54ed-9bf6-b95fdbeac35a","refWordMdxSlugDict":{"azure-cosmos-db-item":"azure/azure-cosmos-db/azure-cosmos-db-item"},"tocTypes":["sidebar"]}},
    "staticQueryHashes": ["2221750479","2380733210","2768355698","63159454","847517413"]}