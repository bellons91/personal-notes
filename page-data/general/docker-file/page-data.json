{
    "componentChunkName": "component---node-modules-gatsby-theme-kb-src-templates-topic-js",
    "path": "/general/docker-file",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"docker\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Dockerfile\"), mdx(\"p\", null, \"A Dockerfile is a script that contains a series of instructions that are used to build a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Docker\",\n    \"title\": \"Docker\"\n  }, \"[[Docker]]\"), \" image.\"), mdx(\"p\", null, \"Dockerfiles typically include the following information:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"base or parent image\"), \" we use to create the new image\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Commands to update the base OS and install other software\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Build artifacts to include, such as a developed application\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Services to expose, such a storage and network configuration\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Command to run\"), \" when the container is launched\")), mdx(\"p\", null, \"Here's an example of a Dockerfile to build a .NET application:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"dockerfile\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-dockerfile\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-dockerfile\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"# Use the .NET 6 runtime as a base image\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token instruction\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token keyword\"\n  }, \"FROM\"), \" mcr.microsoft.com/dotnet/runtime:6.0\"), \"\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"# Set the working directory to /app\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token instruction\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token keyword\"\n  }, \"WORKDIR\"), \" /app\"), \"\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"# Copy the contents of the published app to the container's /app directory\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token instruction\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token keyword\"\n  }, \"COPY\"), \" bin/Release/net6.0/publish/ .\"), \"\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"# Expose port 80 to the outside world\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token instruction\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token keyword\"\n  }, \"EXPOSE\"), \" 80\"), \"\\n\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"# Set the command to run when the container starts\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token instruction\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token keyword\"\n  }, \"CMD\"), \" [\", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token string\"\n  }, \"\\\"dotnet\\\"\"), \", \", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token string\"\n  }, \"\\\"MyApp.dll\\\"\"), \"]\")))), mdx(\"p\", null, \"In particular:\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FROM mcr.microsoft.com/dotnet/runtime:6.0\"), \": this command sets the base image to the .NET 6 runtime, which is needed to run .NET 6 apps.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"WORKDIR /app\"), \": it sets the working directory \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"of the container structure\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/app\"), \". This is where app files will be copied.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"COPY bin/Release/net6.0/publish/ .\"), \": this command copies the content within the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"bin/Release/net6.0/publish\"), \" folder to the current directory (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".\"), \", which is now set to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/app\"), \").\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EXPOSE 80\"), \": it opens the port 80 to the external world. When you run a container using this image, you have to ensure that you are accessing this \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"internal\"), \" port.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CMD [\\\"dotnet\\\", \\\"MyApp.dll\\\"]\"), \": this is the command to run when the container starts. In this case, we are running the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dotnet\"), \" command with the name of the app's \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/DLL\",\n    \"title\": \"DLL\"\n  }, \"[[DLL]]\"), \".\"), mdx(\"p\", null, \"Read more \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://docs.docker.com/engine/reference/builder/\"\n  }, \"here\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"tableOfContents":{"items":[{"url":"#dockerfile","title":"Dockerfile"}]},"outboundReferences":[],"inboundReferences":[{"contextLine":"- **Trigger on source code update**: you can configure to build the image every time new code is committed, or a pull request is made or updated, by using `az acr task create`, specifying the Git repo, the branch and the [[docker-file]].","referrer":{"parent":{"id":"dbe240aa-0fc5-58b2-8fe9-394c96256311","fields":{"slug":"/azure/azure-container/acr-tasks","title":"ACR Tasks"}}}}]},"fields":{"slug":"/general/docker-file","title":"Dockerfile"}}},"pageContext":{"id":"5ac4e951-8b4d-5968-ba53-c3712123d49b","refWordMdxSlugDict":{},"tocTypes":["sidebar"]}},
    "staticQueryHashes": ["2221750479","2380733210","2768355698","63159454","847517413"]}