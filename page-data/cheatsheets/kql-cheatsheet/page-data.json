{
    "componentChunkName": "component---node-modules-gatsby-theme-kb-src-templates-topic-js",
    "path": "/cheatsheets/kql-cheatsheet",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Esempi query KQL\"), mdx(\"h2\", null, \"Sort columns, specifying only the first ones to show\"), mdx(\"p\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"project-reorder\"), \".\"), mdx(\"h2\", null, \"Contains Case sensitive\"), mdx(\"p\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"contains_cs\")), mdx(\"h2\", null, \"Filter by time range\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"between\"), \" operator:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"kql\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-kql\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kql\"\n  }, \"where timestamp between (todatetime(\\\"9/28/2023, 9:41:28.577 AM\\\") .. todatetime(\\\"9/28/2023, 9:45:28.577 AM\\\"))\"))), mdx(\"p\", null, \"The date is in the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"mese/giorno/anno\"), \" format.\"), mdx(\"p\", null, \"By default, the time is in UTC (2hours behind).\"), mdx(\"p\", null, \"You can use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"now()\"), \" to define a filter from the current instant:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"kql\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-kql\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kql\"\n  }, \"where timestamp between (now(-60d) .. now())\"))), mdx(\"h2\", null, \"Create a new computed field\"), mdx(\"p\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"extend\"), \":\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"kql\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-kql\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kql\"\n  }, \"extend  lastpart_ = split( operation_Name, \\\"/\\\")[-1]\"))), mdx(\"h2\", null, \"Take the last part of a string\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"split\"), \" operator to split the string by a certain charachter, then access the parts using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[position]\"), \".\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"kql\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-kql\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kql\"\n  }, \"extend  lastpart_ = split( operation_Name, \\\"/\\\")[-1]\"))), mdx(\"p\", null, \"You can access the last part using  \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"-1\"), \".\"), mdx(\"h2\", null, \"Visualize a pie chart\"), mdx(\"p\", null, \"After a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"summarize\"), \" over a field, use\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"kql\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-kql\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kql\"\n  }, \"render piechart\"))), mdx(\"h2\", null, \"Parse a text\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"parse\"), \" operator on a string, and automatically replace parts that match a part of the message\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"kql\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-kql\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kql\"\n  }, \"parse message with '[HTTP TRACE - '_type_' - '_endpoint_']'\"))), mdx(\"p\", null, \"This way you read the messages, and it auto populates the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_type_\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_endpoint_\"), \" values obtained from the substitution.\"), mdx(\"h2\", null, \"Check if a field belongs to a list of values\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"in\"), \" operator:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"kql\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-kql\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kql\"\n  }, \"| where _type_ in (\\\"RESPONSE\\\", \\\"REQUEST\\\")\"))), mdx(\"h2\", null, \"Group values based on a field\"), mdx(\"p\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"make_list\"), \", specifying what hte list must contains and what is the key used for grouping.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"kql\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-kql\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kql\"\n  }, \"summarize make_list(_type_) by operation_Id,\"))), mdx(\"p\", null, \"From the main table, it groups by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"operation_Id\"), \" and stores in the list all the values for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_type_\"), \".\"), mdx(\"p\", null, \"Note: the result is a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dynamic\"), \" type. Data inside the list do not have a static type.\"), mdx(\"p\", null, \"You can give the list a name by assigning it to a field:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"kql\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-kql\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kql\"\n  }, \"summarize ls_ = make_list(timestamp) by operation_Id\"))), mdx(\"h2\", null, \"Save the query result in a temporary table\"), mdx(\"p\", null, \"You can save the result in a valiable using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"let\"), \" operator, and then reuse it in a following query.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Note: the first query must end with \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \";\"), \".\")), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"kql\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-kql\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kql\"\n  }, \"let tab_ = traces\\n| take 10;\\ntab_\\n| where message !has \\\"ciao\\\"\"))), mdx(\"h2\", null, \"Join two tables\"), mdx(\"p\", null, \"Use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"join\"), \" operator choosing the type of join and the field used as a key s\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"kql\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-kql\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kql\"\n  }, \"traces\\n| join kind=inner failedOperationIds_ on operation_Id\"))), mdx(\"h2\", null, \"Has vs Contains\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"has\"), \" is more performant than \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"contains\"), \", but it does not look for substrings (only full words).\"), mdx(\"p\", null, \"If the operation_Name is \\xE9 \\\"DequeueMessageHandler\\\", using\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"kql\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-kql\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kql\"\n  }, \"traces\\n| where operation_Name has \\\"Dequeue\\\"\"))), mdx(\"p\", null, \"I don't get anything, as \\\"Dequeue\\\" is not a single world in the message.\"), mdx(\"p\", null, \"On the contrary, using\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"kql\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-kql\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kql\"\n  }, \"traces\\n| where operation_Name contains \\\"Dequeue\\\"\"))), mdx(\"p\", null, \"I get what I'm looking for, because I look at substrings.\"), mdx(\"h2\", null, \"User-defined functions\"), mdx(\"p\", null, \"You can create custom functions to use in the query.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"kql\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-kql\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kql\"\n  }, \"let HasSms = (arg0: string) { arg0 has \\\"Sending SMS has been successfully sent\\\" };\\ntraces\\n    | where HasSms(message)\"))), mdx(\"h2\", null, \"Convert the first value of an array into a single element\"), mdx(\"p\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"toscalar\"), \".\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"kql\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-kql\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-kql\"\n  }, \"let startDate = toscalar (traces\\n| where operation_Id == operationId\\n| order by timestamp asc\\n| project timestamp\\n| take 1);\"))), mdx(\"p\", null, \"note the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"take 1\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"tableOfContents":{"items":[{"url":"#esempi-query-kql","title":"Esempi query KQL","items":[{"url":"#sort-columns-specifying-only-the-first-ones-to-show","title":"Sort columns, specifying only the first ones to show"},{"url":"#contains-case-sensitive","title":"Contains Case sensitive"},{"url":"#filter-by-time-range","title":"Filter by time range"},{"url":"#create-a-new-computed-field","title":"Create a new computed field"},{"url":"#take-the-last-part-of-a-string","title":"Take the last part of a string"},{"url":"#visualize-a-pie-chart","title":"Visualize a pie chart"},{"url":"#parse-a-text","title":"Parse a text"},{"url":"#check-if-a-field-belongs-to-a-list-of-values","title":"Check if a field belongs to a list of values"},{"url":"#group-values-based-on-a-field","title":"Group values based on a field"},{"url":"#save-the-query-result-in-a-temporary-table","title":"Save the query result in a temporary table"},{"url":"#join-two-tables","title":"Join two tables"},{"url":"#has-vs-contains","title":"Has vs Contains"},{"url":"#user-defined-functions","title":"User-defined functions"},{"url":"#convert-the-first-value-of-an-array-into-a-single-element","title":"Convert the first value of an array into a single element"}]}]},"outboundReferences":[],"inboundReferences":[]},"fields":{"slug":"/cheatsheets/kql-cheatsheet","title":"Esempi query KQL"}}},"pageContext":{"id":"55093fe7-f6ad-5ffa-9fce-520e28ebcc47","refWordMdxSlugDict":{},"tocTypes":["sidebar"]}},
    "staticQueryHashes": ["2221750479","2380733210","2768355698","63159454","847517413"]}