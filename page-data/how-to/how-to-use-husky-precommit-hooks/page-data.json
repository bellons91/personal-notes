{
    "componentChunkName": "component---node-modules-gatsby-theme-kb-src-templates-topic-js",
    "path": "/how-to/how-to-use-husky-precommit-hooks",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"GIT, dotNET\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"How to Use Husky.NET Pre-commit hooks\"), mdx(\"p\", null, \"If you need to run operations before completing a Git Commit, you must rely on Git Hooks.\"), mdx(\"p\", null, \"I've already described how to use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.code4it.dev/blog/conventional-commit-with-githooks/\"\n  }, \"Husky with NPM\"), \", but here I'm gonna use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://alirezanet.github.io/Husky.Net/\"\n  }, \"Husky.NET\"), \", the version of Husky created for .NET applications.\"), mdx(\"h2\", null, \"Install the tool\"), mdx(\"p\", null, \"The tool must be installed in the root folder of the solution.\"), mdx(\"p\", null, \"To install the tool globally, you have to run\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"cmd\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-cmd\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"dotnet new tool-manifest\\ndotnet tool install Husky\"))), mdx(\"p\", null, \"and, to add it to an existing .NET application, you must run\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"cmd\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-cmd\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"dotnet husky install\"))), mdx(\"p\", null, \"Finally, you can add a new hook by running, for example,\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"cmd\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-cmd\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"dotnet husky add pre-commit -c \\\"echo 'Husky.Net is awesome!'\\\"\\ngit add .husky/pre-commit\"))), mdx(\"p\", null, \"This fill create a new file, \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"pre-commit\"), \", in your project. The content, here, is pretty useless: you should customize that script.\"), mdx(\"h2\", null, \"Create custom scripts\"), mdx(\"p\", null, \"To customize the script, open the file located at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".husky/pre-commit\"), \" (the file has no extensions).\"), mdx(\"p\", null, \"Here you can add whatever you want.\"), mdx(\"p\", null, \"My personal file just compiles the code, formats the text (using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dotnet format\"), \" with the rules defined in the .editorconfig file), and then runs all the tests.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"cmd\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-cmd\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"#!/bin/sh\\n. \\\"$(dirname \\\"$0\\\")/_/husky.sh\\\"\\n\\necho 'Building code'\\ndotnet build\\n\\necho 'Formatting code'\\ndotnet format\\ngit add .\\n\\necho 'Running tests'\\ndotnet test\"))), mdx(\"p\", null, \"Then, add it to Git, and you are ready to go.\"), mdx(\"h2\", null, \"Skip git hooks\"), mdx(\"p\", null, \"To trigger the hook, just run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"git commit -m \\\"message\\\"\"), \". \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Before\"), \" completing the commit, the hook will run all the commands. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"If one of them fails, the whole commit operation is aborted\"), \".\"), mdx(\"p\", null, \"There are cases when you have to skip the validation. For example, if you have integration tests that rely on an external source that is currently offline. In that case, some tests will fail, and you won't be able to commit your code until the external system comes back.\"), mdx(\"p\", null, \"You can skip the commit validation by adding the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"--no-verify\"), \" flag:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"cmd\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-cmd\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cmd\"\n  }, \"git commit -m \\\"my message\\\" --no-verify\"))), mdx(\"h2\", null, \"Related notes\"), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/how-to-use-editorconfig\",\n    \"title\": \"how-to-use-editorconfig\"\n  }, \"[[how-to-use-editorconfig]]\"), \"\"), mdx(\"h2\", null, \"External references\"), mdx(\"p\", null, \"\\uD83D\\uDD17 \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://alirezanet.github.io/Husky.Net/\"\n  }, \"Husky.Net\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"tableOfContents":{"items":[{"url":"#how-to-use-huskynet-pre-commit-hooks","title":"How to Use Husky.NET Pre-commit hooks","items":[{"url":"#install-the-tool","title":"Install the tool"},{"url":"#create-custom-scripts","title":"Create custom scripts"},{"url":"#skip-git-hooks","title":"Skip git hooks"},{"url":"#related-notes","title":"Related notes"},{"url":"#external-references","title":"External references"}]}]},"outboundReferences":[{"contextLine":"[[how-to-use-editorconfig]]","targetAnchor":null,"refWord":"how-to-use-editorconfig","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"CSharp, Visual-Studio\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"How to use Editorconfig\"), mdx(\"p\", null, \"Having tidy code with shared formatting rules is useful and more elegant.\"), mdx(\"p\", null, \"In a .NET application, you can add an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"editorconfig\"), \" file with all the formatting rules.\"), mdx(\"h2\", null, \"Scope of the file\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"The file must be named .editorconfig\"), \", with the starting dot.\"), mdx(\"p\", null, \"If you put it in the root of the project, it will be applied to all the files.\"), mdx(\"p\", null, \"You can have more than one file in your repository: in fact, you can narrow down the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"scope\"), \" of an editorconfig files by adding a new file in a specific folder or project.\"), mdx(\"h2\", null, \"Formatting the code using CMD\"), mdx(\"p\", null, \"You can format all the files by running \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dotnet format\"), \".\"), mdx(\"p\", null, \"You can also specify which kind of formatting you want to apply:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dotnet format whitespace\"), \" runs whitespace formatting;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dotnet format style\"), \" runs code style analyzers;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dotnet format analyzers\"), \" runs 3rd party analyzers.\")), mdx(\"p\", null, \"At the end of the article ,you can find the one I'm using (it can be changed if I find more useful rules).\"), mdx(\"h2\", null, \"How to edit that file\"), mdx(\"p\", null, \"You can edit it manually, but updating the content of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \".editorconfig\"), \" file.\"), mdx(\"p\", null, \"If you prefer a UI, you can locate that file in the Solution Explorer in Visual Studio, open it, and edit it using a UI editor:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/personal-notes/f17227f06c3885316eed4bd19156c367/editorconfig-editor-visualstudio.png\",\n    \"alt\": \"Visual Studio editor\"\n  })), mdx(\"h2\", null, \"My personal EditorConfig\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"plaintext\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-plaintext\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-plaintext\"\n  }, \"# Version: 4.1.1 (Using https://semver.org/)\\n# Updated: 2022-05-23\\n# See https://github.com/RehanSaeed/EditorConfig/releases for release notes.\\n# See https://github.com/RehanSaeed/EditorConfig for updates to this file.\\n# See http://EditorConfig.org for more information about .editorconfig files.\\n\\n##########################################\\n# Common Settings\\n##########################################\\n\\n# This file is the top-most EditorConfig file\\nroot = true\\n\\n# All Files\\n[*]\\ncharset = utf-8\\nindent_style = space\\nindent_size = 4\\ninsert_final_newline = true\\ntrim_trailing_whitespace = true\\n\\n##########################################\\n# File Extension Settings\\n##########################################\\n\\n# Visual Studio Solution Files\\n[*.sln]\\nindent_style = tab\\n\\n# Visual Studio XML Project Files\\n[*.{csproj,vbproj,vcxproj.filters,proj,projitems,shproj}]\\nindent_size = 2\\n\\n# XML Configuration Files\\n[*.{xml,config,props,targets,nuspec,resx,ruleset,vsixmanifest,vsct}]\\nindent_size = 2\\n\\n# JSON Files\\n[*.{json,json5,webmanifest}]\\nindent_size = 2\\n\\n# YAML Files\\n[*.{yml,yaml}]\\nindent_size = 2\\n\\n# Markdown Files\\n[*.{md,mdx}]\\ntrim_trailing_whitespace = false\\n\\n# Web Files\\n[*.{htm,html,js,jsm,ts,tsx,cjs,cts,ctsx,mjs,mts,mtsx,css,sass,scss,less,pcss,svg,vue}]\\nindent_size = 2\\n\\n# Batch Files\\n[*.{cmd,bat}]\\nend_of_line = crlf\\n\\n# Bash Files\\n[*.sh]\\nend_of_line = lf\\n\\n# Makefiles\\n[Makefile]\\nindent_style = tab\\n\\n##########################################\\n# Default .NET Code Style Severities\\n# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/configuration-options#scope\\n##########################################\\n\\n[*.{cs,csx,cake,vb,vbx}]\\n# Default Severity for all .NET Code Style rules below\\ndotnet_analyzer_diagnostic.severity = warning\\n\\n##########################################\\n# Language Rules\\n# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/language-rules\\n##########################################\\n\\n# .NET Style Rules\\n# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/language-rules#net-style-rules\\n[*.{cs,csx,cake,vb,vbx}]\\n# \\\"this.\\\" and \\\"Me.\\\" qualifiers\\ndotnet_style_qualification_for_field = false:warning\\ndotnet_style_qualification_for_property = false:warning\\ndotnet_style_qualification_for_method = false:warning\\ndotnet_style_qualification_for_event = false:warning\\n# Language keywords instead of framework type names for type references\\ndotnet_style_predefined_type_for_locals_parameters_members = true:warning\\ndotnet_style_predefined_type_for_member_access = true:warning\\n# Modifier preferences\\ndotnet_style_require_accessibility_modifiers = always:warning\\ncsharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:warning\\nvisual_basic_preferred_modifier_order = Partial,Default,Private,Protected,Public,Friend,NotOverridable,Overridable,MustOverride,Overloads,Overrides,MustInherit,NotInheritable,Static,Shared,Shadows,ReadOnly,WriteOnly,Dim,Const,WithEvents,Widening,Narrowing,Custom,Async:warning\\ndotnet_style_readonly_field = true:warning\\n# Parentheses preferences\\ndotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning\\ndotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning\\ndotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning\\ndotnet_style_parentheses_in_other_operators = never_if_unnecessary:warning\\n# Expression-level preferences\\ndotnet_style_object_initializer = true:warning\\ndotnet_style_collection_initializer = true:warning\\ndotnet_style_explicit_tuple_names = true:warning\\ndotnet_style_prefer_inferred_tuple_names = true:warning\\ndotnet_style_prefer_inferred_anonymous_type_member_names = true:warning\\ndotnet_style_prefer_auto_properties = true:warning\\ndotnet_style_prefer_conditional_expression_over_assignment = true:suggestion\\ndotnet_diagnostic.IDE0045.severity = suggestion\\ndotnet_style_prefer_conditional_expression_over_return = false:suggestion\\ndotnet_diagnostic.IDE0046.severity = suggestion\\ndotnet_style_prefer_compound_assignment = true:warning\\ndotnet_style_prefer_simplified_interpolation = true:warning\\ndotnet_style_prefer_simplified_boolean_expressions = true:warning\\n# Null-checking preferences\\ndotnet_style_coalesce_expression = true:warning\\ndotnet_style_null_propagation = true:warning\\ndotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning\\n# File header preferences\\n# file_header_template = <copyright file=\\\"{fileName}\\\" company=\\\"PROJECT-AUTHOR\\\">\\\\n\\xA9 PROJECT-AUTHOR\\\\n</copyright>\\n# If you use StyleCop, you'll need to disable SA1636: File header copyright text should match.\\n# dotnet_diagnostic.SA1636.severity = none\\n# Undocumented\\ndotnet_style_operator_placement_when_wrapping = end_of_line:warning\\ncsharp_style_prefer_null_check_over_type_check = true:warning\\n\\n# C# Style Rules\\n# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/language-rules#c-style-rules\\n[*.{cs,csx,cake}]\\n# 'var' preferences\\ncsharp_style_var_for_built_in_types = true:warning\\ncsharp_style_var_when_type_is_apparent = true:warning\\ncsharp_style_var_elsewhere = true:warning\\n# Expression-bodied members\\ncsharp_style_expression_bodied_methods = true:warning\\ncsharp_style_expression_bodied_constructors = false:warning\\ncsharp_style_expression_bodied_operators = true:warning\\ncsharp_style_expression_bodied_properties = true:warning\\ncsharp_style_expression_bodied_indexers = true:warning\\ncsharp_style_expression_bodied_accessors = true:warning\\ncsharp_style_expression_bodied_lambdas = true:warning\\ncsharp_style_expression_bodied_local_functions = true:warning\\n# Pattern matching preferences\\ncsharp_style_pattern_matching_over_is_with_cast_check = true:warning\\ncsharp_style_pattern_matching_over_as_with_null_check = true:warning\\ncsharp_style_prefer_switch_expression = true:warning\\ncsharp_style_prefer_pattern_matching = true:warning\\ncsharp_style_prefer_not_pattern = true:warning\\n# Expression-level preferences\\ncsharp_style_inlined_variable_declaration = true:warning\\ncsharp_prefer_simple_default_expression = true:warning\\ncsharp_style_pattern_local_over_anonymous_function = true:warning\\ncsharp_style_deconstructed_variable_declaration = true:warning\\ncsharp_style_prefer_index_operator = true:warning\\ncsharp_style_prefer_range_operator = true:warning\\ncsharp_style_implicit_object_creation_when_type_is_apparent = true:warning\\n# \\\"Null\\\" checking preferences\\ncsharp_style_throw_expression = true:warning\\ncsharp_style_conditional_delegate_call = true:warning\\n# Code block preferences\\ncsharp_prefer_braces = true:warning\\ncsharp_prefer_simple_using_statement = true:suggestion\\ndotnet_diagnostic.IDE0063.severity = suggestion\\n# 'using' directive preferences\\ncsharp_using_directive_placement = outside_namespace:warning\\n# Modifier preferences\\ncsharp_prefer_static_local_function = true:warning\\n\\n##########################################\\n# Unnecessary Code Rules\\n# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/unnecessary-code-rules\\n##########################################\\n\\n# .NET Unnecessary code rules\\n[*.{cs,csx,cake,vb,vbx}]\\ndotnet_code_quality_unused_parameters = all:warning\\ndotnet_remove_unnecessary_suppression_exclusions = none:warning\\n\\n# C# Unnecessary code rules\\n[*.{cs,csx,cake}]\\ncsharp_style_unused_value_expression_statement_preference = discard_variable:suggestion\\ndotnet_diagnostic.IDE0058.severity = suggestion\\ncsharp_style_unused_value_assignment_preference = discard_variable:suggestion\\ndotnet_diagnostic.IDE0059.severity = suggestion\\n\\n##########################################\\n# Formatting Rules\\n# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/formatting-rules\\n##########################################\\n\\n# .NET formatting rules\\n# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#net-formatting-rules\\n[*.{cs,csx,cake,vb,vbx}]\\n# Organize using directives\\ndotnet_sort_system_directives_first = true\\ndotnet_separate_import_directive_groups = false\\n# Dotnet namespace options\\ndotnet_style_namespace_match_folder = true:suggestion\\ndotnet_diagnostic.IDE0130.severity = suggestion\\n\\n# C# formatting rules\\n# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#c-formatting-rules\\n[*.{cs,csx,cake}]\\n# Newline options\\n# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#new-line-options\\ncsharp_new_line_before_open_brace = all\\ncsharp_new_line_before_else = true\\ncsharp_new_line_before_catch = true\\ncsharp_new_line_before_finally = true\\ncsharp_new_line_before_members_in_object_initializers = true\\ncsharp_new_line_before_members_in_anonymous_types = true\\ncsharp_new_line_between_query_expression_clauses = true\\n# Indentation options\\n# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#indentation-options\\ncsharp_indent_case_contents = true\\ncsharp_indent_switch_labels = true\\ncsharp_indent_labels = no_change\\ncsharp_indent_block_contents = true\\ncsharp_indent_braces = false\\ncsharp_indent_case_contents_when_block = false\\n# Spacing options\\n# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#spacing-options\\ncsharp_space_after_cast = false\\ncsharp_space_after_keywords_in_control_flow_statements = true\\ncsharp_space_between_parentheses = false\\ncsharp_space_before_colon_in_inheritance_clause = true\\ncsharp_space_after_colon_in_inheritance_clause = true\\ncsharp_space_around_binary_operators = before_and_after\\ncsharp_space_between_method_declaration_parameter_list_parentheses = false\\ncsharp_space_between_method_declaration_empty_parameter_list_parentheses = false\\ncsharp_space_between_method_declaration_name_and_open_parenthesis = false\\ncsharp_space_between_method_call_parameter_list_parentheses = false\\ncsharp_space_between_method_call_empty_parameter_list_parentheses = false\\ncsharp_space_between_method_call_name_and_opening_parenthesis = false\\ncsharp_space_after_comma = true\\ncsharp_space_before_comma = false\\ncsharp_space_after_dot = false\\ncsharp_space_before_dot = false\\ncsharp_space_after_semicolon_in_for_statement = true\\ncsharp_space_before_semicolon_in_for_statement = false\\ncsharp_space_around_declaration_statements = false\\ncsharp_space_before_open_square_brackets = false\\ncsharp_space_between_empty_square_brackets = false\\ncsharp_space_between_square_brackets = false\\n# Wrap options\\n# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#wrap-options\\ncsharp_preserve_single_line_statements = false\\ncsharp_preserve_single_line_blocks = true\\n# Namespace options\\n# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/formatting-rules#namespace-options\\ncsharp_style_namespace_declarations = file_scoped:warning\\n\\n##########################################\\n# .NET Naming Rules\\n# https://docs.microsoft.com/dotnet/fundamentals/code-analysis/style-rules/naming-rules\\n##########################################\\n\\n[*.{cs,csx,cake,vb,vbx}]\\n\\n##########################################\\n# Styles\\n##########################################\\n\\n# camel_case_style - Define the camelCase style\\ndotnet_naming_style.camel_case_style.capitalization = camel_case\\n# pascal_case_style - Define the PascalCase style\\ndotnet_naming_style.pascal_case_style.capitalization = pascal_case\\n# first_upper_style - The first character must start with an upper-case character\\ndotnet_naming_style.first_upper_style.capitalization = first_word_upper\\n# prefix_interface_with_i_style - Interfaces must be PascalCase and the first character of an interface must be an 'I'\\ndotnet_naming_style.prefix_interface_with_i_style.capitalization = pascal_case\\ndotnet_naming_style.prefix_interface_with_i_style.required_prefix = I\\n# prefix_type_parameters_with_t_style - Generic Type Parameters must be PascalCase and the first character must be a 'T'\\ndotnet_naming_style.prefix_type_parameters_with_t_style.capitalization = pascal_case\\ndotnet_naming_style.prefix_type_parameters_with_t_style.required_prefix = T\\n# disallowed_style - Anything that has this style applied is marked as disallowed\\ndotnet_naming_style.disallowed_style.capitalization  = pascal_case\\ndotnet_naming_style.disallowed_style.required_prefix = ____RULE_VIOLATION____\\ndotnet_naming_style.disallowed_style.required_suffix = ____RULE_VIOLATION____\\n# internal_error_style - This style should never occur... if it does, it indicates a bug in file or in the parser using the file\\ndotnet_naming_style.internal_error_style.capitalization  = pascal_case\\ndotnet_naming_style.internal_error_style.required_prefix = ____INTERNAL_ERROR____\\ndotnet_naming_style.internal_error_style.required_suffix = ____INTERNAL_ERROR____\\n\\n##########################################\\n# .NET Design Guideline Field Naming Rules\\n# Naming rules for fields follow the .NET Framework design guidelines\\n# https://docs.microsoft.com/dotnet/standard/design-guidelines/index\\n##########################################\\n\\n# All public/protected/protected_internal constant fields must be PascalCase\\n# https://docs.microsoft.com/dotnet/standard/design-guidelines/field\\ndotnet_naming_symbols.public_protected_constant_fields_group.applicable_accessibilities = public, protected, protected_internal\\ndotnet_naming_symbols.public_protected_constant_fields_group.required_modifiers         = const\\ndotnet_naming_symbols.public_protected_constant_fields_group.applicable_kinds           = field\\ndotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.symbols    = public_protected_constant_fields_group\\ndotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.style      = pascal_case_style\\ndotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.severity   = warning\\n\\n# All public/protected/protected_internal static readonly fields must be PascalCase\\n# https://docs.microsoft.com/dotnet/standard/design-guidelines/field\\ndotnet_naming_symbols.public_protected_static_readonly_fields_group.applicable_accessibilities = public, protected, protected_internal\\ndotnet_naming_symbols.public_protected_static_readonly_fields_group.required_modifiers         = static, readonly\\ndotnet_naming_symbols.public_protected_static_readonly_fields_group.applicable_kinds           = field\\ndotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.symbols    = public_protected_static_readonly_fields_group\\ndotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.style      = pascal_case_style\\ndotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.severity   = warning\\n\\n# No other public/protected/protected_internal fields are allowed\\n# https://docs.microsoft.com/dotnet/standard/design-guidelines/field\\ndotnet_naming_symbols.other_public_protected_fields_group.applicable_accessibilities = public, protected, protected_internal\\ndotnet_naming_symbols.other_public_protected_fields_group.applicable_kinds           = field\\ndotnet_naming_rule.other_public_protected_fields_disallowed_rule.symbols             = other_public_protected_fields_group\\ndotnet_naming_rule.other_public_protected_fields_disallowed_rule.style               = disallowed_style\\ndotnet_naming_rule.other_public_protected_fields_disallowed_rule.severity            = error\\n\\n##########################################\\n# StyleCop Field Naming Rules\\n# Naming rules for fields follow the StyleCop analyzers\\n# This does not override any rules using disallowed_style above\\n# https://github.com/DotNetAnalyzers/StyleCopAnalyzers\\n##########################################\\n\\n# All constant fields must be PascalCase\\n# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1303.md\\ndotnet_naming_symbols.stylecop_constant_fields_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected, private\\ndotnet_naming_symbols.stylecop_constant_fields_group.required_modifiers         = const\\ndotnet_naming_symbols.stylecop_constant_fields_group.applicable_kinds           = field\\ndotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.symbols    = stylecop_constant_fields_group\\ndotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.style      = pascal_case_style\\ndotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.severity   = warning\\n\\n# All static readonly fields must be PascalCase\\n# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1311.md\\ndotnet_naming_symbols.stylecop_static_readonly_fields_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected, private\\ndotnet_naming_symbols.stylecop_static_readonly_fields_group.required_modifiers         = static, readonly\\ndotnet_naming_symbols.stylecop_static_readonly_fields_group.applicable_kinds           = field\\ndotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.symbols    = stylecop_static_readonly_fields_group\\ndotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.style      = pascal_case_style\\ndotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.severity   = warning\\n\\n# No non-private instance fields are allowed\\n# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1401.md\\ndotnet_naming_symbols.stylecop_fields_must_be_private_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected\\ndotnet_naming_symbols.stylecop_fields_must_be_private_group.applicable_kinds           = field\\ndotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.symbols               = stylecop_fields_must_be_private_group\\ndotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.style                 = disallowed_style\\ndotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.severity              = error\\n\\n# Private fields must be camelCase\\n# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1306.md\\ndotnet_naming_symbols.stylecop_private_fields_group.applicable_accessibilities = private\\ndotnet_naming_symbols.stylecop_private_fields_group.applicable_kinds           = field\\ndotnet_naming_rule.stylecop_private_fields_must_be_camel_case_rule.symbols     = stylecop_private_fields_group\\ndotnet_naming_rule.stylecop_private_fields_must_be_camel_case_rule.style       = camel_case_style\\ndotnet_naming_rule.stylecop_private_fields_must_be_camel_case_rule.severity    = warning\\n\\n# Local variables must be camelCase\\n# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1312.md\\ndotnet_naming_symbols.stylecop_local_fields_group.applicable_accessibilities = local\\ndotnet_naming_symbols.stylecop_local_fields_group.applicable_kinds           = local\\ndotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.symbols     = stylecop_local_fields_group\\ndotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.style       = camel_case_style\\ndotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.severity    = silent\\n\\n# This rule should never fire.  However, it's included for at least two purposes:\\n# First, it helps to understand, reason about, and root-case certain types of issues, such as bugs in .editorconfig parsers.\\n# Second, it helps to raise immediate awareness if a new field type is added (as occurred recently in C#).\\ndotnet_naming_symbols.sanity_check_uncovered_field_case_group.applicable_accessibilities = *\\ndotnet_naming_symbols.sanity_check_uncovered_field_case_group.applicable_kinds           = field\\ndotnet_naming_rule.sanity_check_uncovered_field_case_rule.symbols  = sanity_check_uncovered_field_case_group\\ndotnet_naming_rule.sanity_check_uncovered_field_case_rule.style    = internal_error_style\\ndotnet_naming_rule.sanity_check_uncovered_field_case_rule.severity = error\\n\\n\\n##########################################\\n# Other Naming Rules\\n##########################################\\n\\n# All of the following must be PascalCase:\\n# - Namespaces\\n#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-namespaces\\n#   https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1300.md\\n# - Classes and Enumerations\\n#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces\\n#   https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1300.md\\n# - Delegates\\n#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces#names-of-common-types\\n# - Constructors, Properties, Events, Methods\\n#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-type-members\\ndotnet_naming_symbols.element_group.applicable_kinds = namespace, class, enum, struct, delegate, event, method, property\\ndotnet_naming_rule.element_rule.symbols              = element_group\\ndotnet_naming_rule.element_rule.style                = pascal_case_style\\ndotnet_naming_rule.element_rule.severity             = warning\\n\\n# Interfaces use PascalCase and are prefixed with uppercase 'I'\\n# https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces\\ndotnet_naming_symbols.interface_group.applicable_kinds = interface\\ndotnet_naming_rule.interface_rule.symbols              = interface_group\\ndotnet_naming_rule.interface_rule.style                = prefix_interface_with_i_style\\ndotnet_naming_rule.interface_rule.severity             = warning\\n\\n# Generics Type Parameters use PascalCase and are prefixed with uppercase 'T'\\n# https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces\\ndotnet_naming_symbols.type_parameter_group.applicable_kinds = type_parameter\\ndotnet_naming_rule.type_parameter_rule.symbols              = type_parameter_group\\ndotnet_naming_rule.type_parameter_rule.style                = prefix_type_parameters_with_t_style\\ndotnet_naming_rule.type_parameter_rule.severity             = warning\\n\\n# Function parameters use camelCase\\n# https://docs.microsoft.com/dotnet/standard/design-guidelines/naming-parameters\\ndotnet_naming_symbols.parameters_group.applicable_kinds = parameter\\ndotnet_naming_rule.parameters_rule.symbols              = parameters_group\\ndotnet_naming_rule.parameters_rule.style                = camel_case_style\\ndotnet_naming_rule.parameters_rule.severity             = warning\\n\\n# Define the 'private_fields' symbol group:\\ndotnet_naming_symbols.private_fields.applicable_kinds = field\\ndotnet_naming_symbols.private_fields.applicable_accessibilities = private\\n\\n# Define the 'private_static_fields' symbol group\\ndotnet_naming_symbols.private_static_fields.applicable_kinds = field\\ndotnet_naming_symbols.private_static_fields.applicable_accessibilities = private\\ndotnet_naming_symbols.private_static_fields.required_modifiers = static\\n\\n# Define the 'private_readonly_fields' symbol group\\ndotnet_naming_symbols.private_readonly_fields.applicable_kinds = field\\ndotnet_naming_symbols.private_readonly_fields.applicable_accessibilities = private\\ndotnet_naming_symbols.private_readonly_fields.required_modifiers = readonly\\n\\n# Define the 'underscored' naming style\\ndotnet_naming_style.underscored.capitalization = camel_case\\ndotnet_naming_style.underscored.required_prefix = _\\n\\n# Define the 'private_fields_underscored' naming rule\\ndotnet_naming_rule.private_fields_underscored.symbols = private_fields\\ndotnet_naming_rule.private_fields_underscored.style = underscored\\ndotnet_naming_rule.private_fields_underscored.severity = error\\n\\n# Define the 'private_readonly_fields_underscored' naming rule\\ndotnet_naming_rule.private_readonly_fields_underscored.symbols = private_readonly_fields\\ndotnet_naming_rule.private_readonly_fields_underscored.style = underscored\\ndotnet_naming_rule.private_readonly_fields_underscored.severity = error\\n\\n# Define the 'private_static_fields_none' naming rule\\ndotnet_naming_rule.private_static_fields_none.symbols = private_static_fields\\ndotnet_naming_rule.private_static_fields_none.style = underscored\\ndotnet_naming_rule.private_static_fields_none.severity = none\"))));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"71dacfc9-9490-535f-a731-11cb7c4de34e","fields":{"slug":"/how-to/how-to-use-editorconfig","title":"How to use Editorconfig"}}}}],"inboundReferences":[]},"fields":{"slug":"/how-to/how-to-use-husky-precommit-hooks","title":"How to Use Husky.NET Pre-commit hooks"}}},"pageContext":{"id":"0331cb96-c19d-59f7-a66f-3570bd275bda","refWordMdxSlugDict":{"how-to-use-editorconfig":"how-to/how-to-use-editorconfig"},"tocTypes":["sidebar"]}},
    "staticQueryHashes": ["2221750479","2380733210","2768355698","63159454","847517413"]}