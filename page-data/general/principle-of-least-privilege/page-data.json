{
    "componentChunkName": "component---node-modules-gatsby-theme-kb-src-templates-topic-js",
    "path": "/general/principle-of-least-privilege",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"security\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Principle of Least Privilege\"), mdx(\"p\", null, \"The principle of least privilege says that \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"you should only grant access up to the level needed to complete a task\"), \".\"), mdx(\"p\", null, \"Suppose you only need read access to a resource. In that case, you should only be granted access to that specific resource and only for read operations.\"), mdx(\"p\", null, \"In Azure, this can be achieved using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/azure-rbac\",\n    \"title\": \"azure-rbac\"\n  }, \"[[azure-rbac]]\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"tableOfContents":{"items":[{"url":"#principle-of-least-privilege","title":"Principle of Least Privilege"}]},"outboundReferences":[{"contextLine":"In Azure, this can be achieved using [[azure-rbac]].","targetAnchor":null,"refWord":"azure-rbac","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"azure, cloud, az-900, authentication\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Azure Role-Based Access Control (RBAC)\"), mdx(\"p\", null, \"It allows the implementation of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/principle-of-least-privilege\",\n    \"title\": \"principle-of-least-privilege\"\n  }, \"[[principle-of-least-privilege]]\"), \" by defining roles that can be assigned to users.\"), mdx(\"p\", null, \"Each role has a set of access permissions to resources.\"), mdx(\"p\", null, \"Using roles allows you to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"add (and remove) permissions to users by assigning them a specific role;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"updating permissions to a set of users by updating the role's permissions.\")), mdx(\"p\", null, \"Role-based access control is applied to a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"scope\"), \", which is a resource or set of resources that this access applies to.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Azure RBAC is hierarchical\"), \"in that when you grant access at a parent scope, those permissions are inherited by all child scopes.\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"98688651-67d3-5ce0-9489-3d2c4612f43e","fields":{"slug":"/azure/azure-rbac","title":"Azure Role-Based Access Control (RBAC)"}}}}],"inboundReferences":[{"contextLine":"It allows the implementation of the [[principle-of-least-privilege]] by defining roles that can be assigned to users.","referrer":{"parent":{"id":"98688651-67d3-5ce0-9489-3d2c4612f43e","fields":{"slug":"/azure/azure-rbac","title":"Azure Role-Based Access Control (RBAC)"}}}},{"contextLine":"- **Follow [[principle-of-least-privilege]]**: Limit user access with Just-In-Time and Just-Enough-Access (JIT/JEA), risk-based adaptive policies, and data protection.","referrer":{"parent":{"id":"c7296e7b-ed3f-5a6f-9ee7-66951124b5f3","fields":{"slug":"/general/zero-trust-security-model","title":"Zero Trust security model"}}}}]},"fields":{"slug":"/general/principle-of-least-privilege","title":"Principle of Least Privilege"}}},"pageContext":{"id":"b7cc96c6-6ae1-53e6-bebd-5eda506898e4","refWordMdxSlugDict":{"azure-rbac":"azure/azure-rbac","principle-of-least-privilege":"general/principle-of-least-privilege"},"tocTypes":["sidebar"]}},
    "staticQueryHashes": ["2221750479","2380733210","2768355698","63159454","847517413"]}