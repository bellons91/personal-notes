{
    "componentChunkName": "component---node-modules-gatsby-theme-kb-src-templates-topic-js",
    "path": "/how-to/how-to-generate-r-plots-for-benchmarkdotnet",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"r, benchmarkdotnet, performance, benchmark, dotnet\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"How to generate R plots for BenchmarkDotNet\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://cran.r-project.org/bin/windows/base/\"\n  }, \"R\"), \" is a framework to generate graphics and computations.\"), mdx(\"p\", null, \"To use it to generate graphics for BenchmarkDotNet you have to follow these steps:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"download R from the official website (yes, I know, the website does not look fancy...);\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"install it, and store somewhere the installation path (for me, \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"C:\\\\Users\\\\d.bellone\\\\AppData\\\\Local\\\\Programs\\\\R\\\\R-4.3.2\"), \" );\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"set the enviroment variable on Windows. For some reasons, I couldn't edit the values, so I came up with the next steps;\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"run the benchmarks\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"open the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"BenchmarkDotNet.Artifact\"), \" folder under the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"bin\"), \" of your project. For me it's under \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"\\\\bin\\\\Release\\\\net8.0\\\\BenchmarkDotNet.Artifacts\"), \". You should see some \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".log\"), \" files;\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"ensure that in the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"result\"), \" subfolder you have some CSV files and, more important, a file named \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"BuildPlots.R\"), \";\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"open a terminal in the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"results\"), \" folder, and run this command: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"C:\\\\Users\\\\d.bellone\\\\AppData\\\\Local\\\\Programs\\\\R\\\\R-4.3.2\\\\bin\\\\RScript.exe ./BuildPlots.R\"), \";\")), mdx(\"p\", null, \"Now you should see lots of PNG files with the rendering of the results.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Who generates those CSV\"), \"? If you remember from before, we customized every benchmark with the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"[Config(typeof(CsvConfig))]\"), \" attribute. This attribute generates both the CSV and the R files, and is defined like this:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"cs\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-cs\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-cs\"\n  }, \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"public\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"class\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token class-name\"\n  }, \"CsvConfig\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \":\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token type-list\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token class-name\"\n  }, \"ManualConfig\")), \"\\n \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n     \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"public\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"CsvConfig\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \"\\n     \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n         \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"Add\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"CsvMeasurementsExporter\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"Default\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n         \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"Add\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"RPlotExporter\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"Default\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n     \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\"), \"\\n \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\")))), mdx(\"p\", null, \"!.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"tableOfContents":{"items":[{"url":"#how-to-generate-r-plots-for-benchmarkdotnet","title":"How to generate R plots for BenchmarkDotNet"}]},"outboundReferences":[],"inboundReferences":[]},"fields":{"slug":"/how-to/how-to-generate-r-plots-for-benchmarkdotnet","title":"How to generate R plots for BenchmarkDotNet"}}},"pageContext":{"id":"31c0f0ad-7c67-58ec-8d09-d2d9c3f0e1d0","refWordMdxSlugDict":{},"tocTypes":["sidebar"]}},
    "staticQueryHashes": ["2221750479","2380733210","2768355698","63159454","847517413"]}