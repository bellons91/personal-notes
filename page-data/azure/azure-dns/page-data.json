{
    "componentChunkName": "component---node-modules-gatsby-theme-kb-src-templates-topic-js",
    "path": "/azure/azure-dns",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"azure, cloud, azure-certifications/az900 networking, paas\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Azure DNS\"), mdx(\"p\", null, \"It's a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/DNS\",\n    \"title\": \"DNS\"\n  }, \"[[DNS]]\"), \", so it provides name resolution by using Microsoft Azure infrastructure.\"), mdx(\"p\", null, \"Azure DNS uses \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/anycast-networking\",\n    \"title\": \"anycast networking\"\n  }, \"[[anycast networking]]\"), \", so each \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/DNS-query\",\n    \"title\": \"DNS query\"\n  }, \"[[DNS query]]\"), \" is answered by the closest available DNS server to provide fast performance and high availability for your domain.\"), mdx(\"p\", null, \"You can use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/azure-rbac\",\n    \"title\": \"azure-rbac\"\n  }, \"[[azure-rbac]]\"), \" to controll access to specific actions.\"), mdx(\"p\", null, \"All the operations on the DNS are tracked and logged, so that you can find errors details when troubleshooting.\"), mdx(\"p\", null, \"Azure DNS also supports private DNS domains, allowing you to use your own custom domain names.\"), mdx(\"p\", null, \"Azure DNS supports ALIAS \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/dns-record-type\",\n    \"title\": \"dns-record-type\"\n  }, \"[[dns-record-type]]\"), \" sets; you can use an alias record set to refer to an Azure resource and, in case it changes, the DNS records are automatically updated.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"tableOfContents":{"items":[{"url":"#azure-dns","title":"Azure DNS"}]},"outboundReferences":[{"contextLine":"It's a [[DNS]], so it provides name resolution by using Microsoft Azure infrastructure.","targetAnchor":null,"refWord":"DNS","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"dns\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"DNS\"), mdx(\"p\", null, \"DNS stands for \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Domain Name System\"), \", which is the phonebook of the Internet. It is a network service that converts between human-readable domain names (such as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"www.example.com\"), \") and machine-friendly IP addresses (such as 192.168.1.1) that browsers use to load web pages.\"), mdx(\"p\", null, \"DNS works by following a series of steps to translate a domain name into an IP address. When a user types a domain name into their web browser, a DNS query is sent to a DNS server, which is a computer that stores a database of domain names and their corresponding IP addresses. The DNS server then performs a lookup process to find the right IP address for the domain name.\"), mdx(\"p\", null, \"The lookup process involves four types of DNS servers:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"DNS recursor\"), \": This is the server that receives the query from the user's device and communicates with other DNS servers to find the answer. It can be thought of as a librarian who is asked to find a particular book in a library.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Root nameserver\"), \": This is the server that is responsible for the root zone of the DNS hierarchy, which contains information about the top-level domains (TLDs) such as .com, .org, .net, etc. It can be thought of as an index in a library that points to different racks of books.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"TLD nameserver\"), \": This is the server that hosts the information about the second-level domains (SLDs) within a TLD, such as example.com, google.com, nytimes.com, etc. It can be thought of as a specific rack of books in a library.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Authoritative nameserver\"), \": This is the server that has the final and definitive answer to the DNS query, which is the IP address of the requested domain name. It can be thought of as a dictionary on a rack of books, where a specific name can be translated into its definition.\")), mdx(\"p\", null, \"The DNS recursor initiates the lookup process by sending a query to one of the root nameservers, which responds with a list of TLD nameservers for the requested TLD. The DNS recursor then sends another query to one of the TLD nameservers, which responds with a list of authoritative nameservers for the requested SLD. The DNS recursor then sends a final query to one of the authoritative nameservers, which responds with the IP address of the requested domain name. The DNS recursor then returns this IP address to the user's device, which can then use it to access the web page.\"), mdx(\"p\", null, \"DNS is an essential component of the Internet, as it allows users to access websites using easy-to-remember domain names instead of complex IP addresses. It also enables website owners to change their IP addresses without affecting their users, as they only need to update their authoritative nameservers with the new IP address . Additionally, DNS can provide other functions such as load balancing, security, and content delivery.\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"6d79db01-8e0f-53c7-bbdd-7023323ec37e","fields":{"slug":"/general/dns","title":"DNS"}}}},{"contextLine":"You can use [[azure-rbac]] to controll access to specific actions.","targetAnchor":null,"refWord":"azure-rbac","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"azure, cloud, azure-certifications/az900, authentication\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Azure Role-Based Access Control (RBAC)\"), mdx(\"p\", null, \"It allows the implementation of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/principle-of-least-privilege\",\n    \"title\": \"principle-of-least-privilege\"\n  }, \"[[principle-of-least-privilege]]\"), \" by defining roles that can be assigned to users.\"), mdx(\"p\", null, \"Each role has a set of access permissions to resources.\"), mdx(\"p\", null, \"Using roles allows you to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"add (and remove) permissions to users by assigning them a specific role;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"updating permissions to a set of users by updating the role's permissions.\")), mdx(\"p\", null, \"Role-based access control is applied to a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"scope\"), \", which is a resource or set of resources that this access applies to.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Azure RBAC is hierarchical\"), \"in that when you grant access at a parent scope, those permissions are inherited by all child scopes.\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"98688651-67d3-5ce0-9489-3d2c4612f43e","fields":{"slug":"/azure/azure-rbac","title":"Azure Role-Based Access Control (RBAC)"}}}},{"contextLine":"Azure DNS supports ALIAS [[dns-record-type]] sets; you can use an alias record set to refer to an Azure resource and, in case it changes, the DNS records are automatically updated.","targetAnchor":null,"refWord":"dns-record-type","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"dns\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"DNS Record types\"), mdx(\"p\", null, \"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/DNS\",\n    \"title\": \"DNS\"\n  }, \"[[DNS]]\"), \" record types are used to map domain names to IP addresses and other information. Here are some of the main DNS record types and their descriptions:\"), mdx(\"h2\", null, \"A\"), mdx(\"p\", null, \"Also known as an address record, it maps a domain name to an \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/IPv4\",\n    \"title\": \"IPv4\"\n  }, \"[[IPv4]]\"), \" address. This is the most common type of DNS record and is used to point a domain name to an IP address. For example, an A record for the domain name example.com could be example.com. IN A 192.0.2.1.\"), mdx(\"h2\", null, \"AAAA\"), mdx(\"p\", null, \"Also known as an IPv6 address record, it maps a domain name to an \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/IPv6\",\n    \"title\": \"IPv6\"\n  }, \"[[IPv6]]\"), \" address. This record is used to point a domain name to an IPv6 address. For example, an AAAA record for the domain name example.com could be example.com. IN AAAA 2001:db8::1.\"), mdx(\"h2\", null, \"ALIAS\"), mdx(\"p\", null, \"An \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ALIAS record\"), \" is a virtual record type that provides CNAME-like behavior on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/apex-domains\",\n    \"title\": \"apex domains\"\n  }, \"[[apex domains]]\"), \". It maps a domain name to a hostname instead of an IP address. For example, if your domain is example.com and you want it to point to a hostname like myapp.herokuapp.com, you can't use a CNAME record, but you can use an ALIAS record. The ALIAS record will automatically resolve your domain to one or more A records at resolution time, and resolvers see your domain as if it had A records.\"), mdx(\"h2\", null, \"CAA\"), mdx(\"p\", null, \"Also known as a certification authority authorization record, it specifies which \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/certificate-authorities\",\n    \"title\": \"certificate authorities\"\n  }, \"[[certificate authorities]]\"), \" are authorized to issue certificates for a domain name. This record is used to prevent unauthorized certificate issuance and improve security. For example, a CAA record for the domain name example.com could be example.com. IN CAA 0 issue \\\"ca.example.com\\\".\"), mdx(\"h2\", null, \"CNAME\"), mdx(\"p\", null, \"Also known as a canonical name record, it maps an alias name to a true domain name. This record is used to create an alias for a domain name. For example, a CNAME record for the domain name \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"www.example.com\"), \" could be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"www.example.com\"), \". IN CNAME example.com.\"), mdx(\"h2\", null, \"DNSKEY\"), mdx(\"p\", null, \"Also known as a DNS security key record, it stores a public key used to verify \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/DNSSEC-signatures\",\n    \"title\": \"DNSSEC signatures\"\n  }, \"[[DNSSEC signatures]]\"), \". This record is used to authenticate DNS data and prevent \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/DNS-spoofing\",\n    \"title\": \"DNS spoofing\"\n  }, \"[[DNS spoofing]]\"), \". For example, a DNSKEY record for the domain name example.com could be example.com. IN DNSKEY 256 3 8 AwEAAc....\"), mdx(\"h2\", null, \"DS\"), mdx(\"p\", null, \"Also known as a delegation signer record, it stores a hash of a DNSKEY record in the parent zone. This record is used to authenticate child zones and prevent \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/DNS-cache-poisoning\",\n    \"title\": \"DNS cache poisoning\"\n  }, \"[[DNS cache poisoning]]\"), \".\"), mdx(\"h2\", null, \"MX\"), mdx(\"p\", null, \"Also known as a mail exchange record, it maps a domain name to a list of mail exchange servers. This record is used to specify the mail server responsible for accepting email messages on behalf of a domain name. For example, an MX record for the domain name example.com could be example.com. IN MX 10 mail.example.com.\"), mdx(\"h2\", null, \"NAPTR\"), mdx(\"p\", null, \"Also known as a naming authority pointer record, it maps a domain name to a regular expression that can be used to transform the domain name into another domain name. This record is used to support advanced services such as ENUM.\"), mdx(\"h2\", null, \"NS\"), mdx(\"p\", null, \"Also known as a name server record, it maps a domain name to a list of name servers. This record is used to delegate a domain name to a set of name servers. For example, an NS record for the domain name example.com could be example.com. IN NS ns1.example.com.\"), mdx(\"h2\", null, \"PTR\"), mdx(\"p\", null, \"Also known as a pointer record, it maps an IP address to a domain name. This record is used to perform a reverse \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/DNS-lookup\",\n    \"title\": \"DNS lookup\"\n  }, \"[[DNS lookup]]\"), \". For example, a PTR record for the IP address 192.0.2.1 could be 1.2.0.192.in-addr.arpa. IN PTR example.com.\"), mdx(\"h2\", null, \"SOA\"), mdx(\"p\", null, \"Also known as a start of authority record, it contains administrative information about a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/DNS-zone\",\n    \"title\": \"DNS zone\"\n  }, \"[[DNS zone]]\"), \". This record is used to specify the primary name server for a DNS zone and other administrative information. For example, an SOA record for the domain name example.com could be example.com. IN SOA ns1.example.com. admin.example.com. 2019020101 3600 1800 604800 86400.\"), mdx(\"h2\", null, \"SRV\"), mdx(\"p\", null, \"Also known as a service record, it maps a domain name to the hostname and port number of servers for a specific service. This record is used to locate services such as SIP and XMPP1. For example, an SRV record for the domain name \", \"_\", \"sip.\", \"_\", \"tcp.example.com could be \", \"_\", \"sip.\", \"_\", \"tcp.example.com. IN SRV 10 60 5060 sipserver.example.com.\"), mdx(\"h2\", null, \"SSHFP\"), mdx(\"p\", null, \"Also known as a Secure Shell fingerprint record, it maps a domain name to the fingerprint of an \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/SSH\",\n    \"title\": \"SSH\"\n  }, \"[[SSH]]\"), \" public key. This record is used to authenticate SSH connections.\"), mdx(\"h2\", null, \"TLSA\"), mdx(\"p\", null, \"Also known as a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/tls\",\n    \"title\": \"tls\"\n  }, \"[[tls]]\"), \" authentication record, it maps a domain name to the certificate or public key of a server. This record is used to authenticate the server\\u2019s identity and establish a secure connection. For example, a TLSA record for the domain name \", \"_\", \"443.\", \"_\", \"tcp.example.com could be \", \"_\", \"443.\", \"_\", \"tcp.example.com. IN TLSA 3 1 1 abcd....\"), mdx(\"h2\", null, \"TXT\"), mdx(\"p\", null, \"Also known as a text record, it contains text information about a domain name. This record is used to store arbitrary text data in a DNS record. For example, a TXT record for the domain name example.com could be example.com. IN TXT \\\"v=spf1 a mx ip4:192.0.2.0/24 ~all\\\".\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"4301458e-6192-556a-9e89-d5cbf984229e","fields":{"slug":"/general/dns-record-type","title":"DNS Record types"}}}}],"inboundReferences":[{"contextLine":"    - [[azure-dns]]","referrer":{"parent":{"id":"c34fa374-8cf9-5420-b22a-1dcb7706b8ea","fields":{"slug":"/azure-certifications/az-900","title":"AZ-900 - Azure Fundamentals"}}}}]},"fields":{"slug":"/azure/azure-dns","title":"Azure DNS"}}},"pageContext":{"id":"9d8226a6-1e94-5cb0-bcea-16dd8b2d4175","refWordMdxSlugDict":{"DNS":"general/dns","azure-rbac":"azure/azure-rbac","principle-of-least-privilege":"general/principle-of-least-privilege","dns-record-type":"general/dns-record-type","tls":"general/tls"},"tocTypes":["sidebar"]}},
    "staticQueryHashes": ["2221750479","2380733210","2768355698","63159454","847517413"]}