{
    "componentChunkName": "component---node-modules-gatsby-theme-kb-src-templates-topic-js",
    "path": "/azure/azure-authentication/service-principal",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"az-204, azure, authentication, entra-id\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Service Principal\"), mdx(\"p\", null, \"Service principals are what govern an application connecting to Microsoft Entra ID and can be considered the instance of the application in your directory.\"), mdx(\"p\", null, \"The security principal defines the access policy and permissions for the user/application in the Microsoft Entra tenant. This enables core features such as authentication of the user/application during sign-in, and authorization during resource access.\"), mdx(\"p\", null, \"When you register an application in the portal, an \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/application-object\",\n    \"title\": \"application-object\"\n  }, \"[[application-object]]\"), \" and a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/service-principal-object\",\n    \"title\": \"service-principal-object\"\n  }, \"[[service-principal-object]]\"), \" are automatically created in your home tenant.\"), mdx(\"p\", null, \"There are three types of service principal:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Application\"), \": This type of service principal is the local representation, or application instance, of a global \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/application-object\",\n    \"title\": \"application-object\"\n  }, \"[[application-object]]\"), \" in a single tenant or directory. \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"A service principal is created in each tenant where the application is used\"), \" and references the globally unique app object. The \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/service-principal-object\",\n    \"title\": \"service-principal-object\"\n  }, \"[[service-principal-object]]\"), \" defines what the app can actually do in the specific tenant, who can access the app, and what resources the app can access.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Managed identity\"), \": This type of service principal is used to represent a \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/managed-identity\",\n    \"title\": \"managed-identity\"\n  }, \"[[managed-identity]]\"), \". When a managed identity is enabled, a service principal representing that managed identity is created in your tenant. Service principals representing managed identities can be granted access and permissions, but can't be updated or modified directly.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Legacy\"), \": This type of service principal represents a legacy app, which is an app created before app registrations were introduced or an app created through legacy experiences. A legacy service principal can have credentials, service principal names, and reply URLs.\")), mdx(\"p\", null, \"The service principal can include:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A reference back to an application object through the application ID property\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Records of local user and group application-role assignments\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Records of local user and admin permissions granted to the application. For example: permission for the application to access a particular user's email\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Records of local policies including Conditional Access policy\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Records of alternate local settings for an application. Eg: Claims transformation rules, Attribute mappings (User provisioning), Directory-specific app roles (if the application supports custom roles), Directory-specific name or logo.\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"tableOfContents":{"items":[{"url":"#service-principal","title":"Service Principal"}]},"outboundReferences":[{"contextLine":"When you register an application in the portal, an [[application-object]] and a [[service-principal-object]] are automatically created in your home tenant.","targetAnchor":null,"refWord":"application-object","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"az-204, azure, authentication, entra-id\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Application Object\"), mdx(\"p\", null, \"Application objects describe the application to Microsoft Entra ID and can be considered the definition of the application, allowing the service to know how to issue tokens to the application based on its settings.\"), mdx(\"p\", null, \"A Microsoft Entra application is defined by its one and only application object.\"), mdx(\"p\", null, \"The application object will only exist in its \\\"home\\\" tenant, even if it's a multi-tenant application supporting service principals in other directories.\"), mdx(\"p\", null, \"Similar to a class in object-oriented programming, the application object has some static properties that are applied to all the created service principals (or application instances), such as:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Name, logo, and publisher\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Redirect URIs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Secrets (symmetric and/or asymmetric keys used to authenticate the application)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"API dependencies (\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/OAuth\",\n    \"title\": \"OAuth\"\n  }, \"[[OAuth]]\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Published APIs/resources/scopes (OAuth)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"App roles\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Single sign-on (\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/SSO\",\n    \"title\": \"SSO\"\n  }, \"[[SSO]]\"), \") metadata and configuration\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"User provisioning metadata and configuration\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Proxy metadata and configuration\")), mdx(\"p\", null, \"An application object is used as a template or blueprint to create one or more \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/service-principal\",\n    \"title\": \"service-principal\"\n  }, \"[[service-principal]]\"), \" objects. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"A service principal is created in every tenant where the application is used.\")), mdx(\"p\", null, \"The application object describes three aspects of an application:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"How the service can issue tokens in order to access the application.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"What are the resources that the application might need to access.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Which are the actions that the application can take.\")), mdx(\"p\", null, \"The application object is the global representation of your application for use across all tenants, and the service principal is the local representation for use in a specific tenant. The application object serves as the template from which common and default properties are derived for use in creating corresponding service principal objects.\"), mdx(\"p\", null, \"An application object has:\"), mdx(\"p\", null, \"A one to one relationship with the software application, and\\nA one to many relationships with its corresponding service principal object(s).\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"ecc4bea7-9ba5-5de5-923a-5c186e07dcf0","fields":{"slug":"/azure/azure-authentication/application-object","title":"Application Object"}}}},{"contextLine":"1. **Application**: This type of service principal is the local representation, or application instance, of a global [[application-object]] in a single tenant or directory. **A service principal is created in each tenant where the application is used** and references the globally unique app object. The [[service-principal-object]] defines what the app can actually do in the specific tenant, who can access the app, and what resources the app can access.","targetAnchor":null,"refWord":"application-object","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"az-204, azure, authentication, entra-id\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Application Object\"), mdx(\"p\", null, \"Application objects describe the application to Microsoft Entra ID and can be considered the definition of the application, allowing the service to know how to issue tokens to the application based on its settings.\"), mdx(\"p\", null, \"A Microsoft Entra application is defined by its one and only application object.\"), mdx(\"p\", null, \"The application object will only exist in its \\\"home\\\" tenant, even if it's a multi-tenant application supporting service principals in other directories.\"), mdx(\"p\", null, \"Similar to a class in object-oriented programming, the application object has some static properties that are applied to all the created service principals (or application instances), such as:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Name, logo, and publisher\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Redirect URIs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Secrets (symmetric and/or asymmetric keys used to authenticate the application)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"API dependencies (\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/OAuth\",\n    \"title\": \"OAuth\"\n  }, \"[[OAuth]]\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Published APIs/resources/scopes (OAuth)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"App roles\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Single sign-on (\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/SSO\",\n    \"title\": \"SSO\"\n  }, \"[[SSO]]\"), \") metadata and configuration\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"User provisioning metadata and configuration\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Proxy metadata and configuration\")), mdx(\"p\", null, \"An application object is used as a template or blueprint to create one or more \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/service-principal\",\n    \"title\": \"service-principal\"\n  }, \"[[service-principal]]\"), \" objects. \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"A service principal is created in every tenant where the application is used.\")), mdx(\"p\", null, \"The application object describes three aspects of an application:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"How the service can issue tokens in order to access the application.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"What are the resources that the application might need to access.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Which are the actions that the application can take.\")), mdx(\"p\", null, \"The application object is the global representation of your application for use across all tenants, and the service principal is the local representation for use in a specific tenant. The application object serves as the template from which common and default properties are derived for use in creating corresponding service principal objects.\"), mdx(\"p\", null, \"An application object has:\"), mdx(\"p\", null, \"A one to one relationship with the software application, and\\nA one to many relationships with its corresponding service principal object(s).\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"ecc4bea7-9ba5-5de5-923a-5c186e07dcf0","fields":{"slug":"/azure/azure-authentication/application-object","title":"Application Object"}}}},{"contextLine":"2. **Managed identity**: This type of service principal is used to represent a [[managed-identity]]. When a managed identity is enabled, a service principal representing that managed identity is created in your tenant. Service principals representing managed identities can be granted access and permissions, but can't be updated or modified directly.","targetAnchor":null,"refWord":"managed-identity","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"az-204, azure, authentication, entra-id\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Managed Identity\"), mdx(\"p\", null, \"Managed identities provide an identity for applications to use when connecting to resources that support Microsoft Entra authentication.\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"9a2119d5-9426-53f4-b0c8-0805c37a6523","fields":{"slug":"/azure/azure-authentication/managed-identity","title":"Managed Identity"}}}}],"inboundReferences":[{"contextLine":"An application object is used as a template or blueprint to create one or more [[service-principal]] objects. **A service principal is created in every tenant where the application is used.**","referrer":{"parent":{"id":"ecc4bea7-9ba5-5de5-923a-5c186e07dcf0","fields":{"slug":"/azure/azure-authentication/application-object","title":"Application Object"}}}},{"contextLine":"If you register an application in the portal, an [[application-object]] (the globally unique instance of the app) and a [[service-principal]] object are automatically created in your home tenant.","referrer":{"parent":{"id":"bbc5547b-2841-5620-a1e3-c2bcbf372eab","fields":{"slug":"/azure/azure-authentication/microsoft-entra-tenant","title":"Microsoft Entra tenant"}}}}]},"fields":{"slug":"/azure/azure-authentication/service-principal","title":"Service Principal"}}},"pageContext":{"id":"06c8d98c-c7ed-525c-ac32-391e5200de52","refWordMdxSlugDict":{"application-object":"azure/azure-authentication/application-object","service-principal":"azure/azure-authentication/service-principal","managed-identity":"azure/azure-authentication/managed-identity"},"tocTypes":["sidebar"]}},
    "staticQueryHashes": ["2221750479","2380733210","2768355698","63159454","847517413"]}