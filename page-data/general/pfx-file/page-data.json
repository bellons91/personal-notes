{
    "componentChunkName": "component---node-modules-gatsby-theme-kb-src-templates-topic-js",
    "path": "/general/pfx-file",
    "result": {"data":{"file":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"certificate\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"PFX file\"), mdx(\"p\", null, \"A PFX file is a type of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/certificate\",\n    \"title\": \"certificate\"\n  }, \"[[certificate]]\"), \" file that contains both the public and private keys of a digital signature.\"), mdx(\"p\", null, \"It is used to verify the identity of the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/certificate-holder\",\n    \"title\": \"certificate holder\"\n  }, \"[[certificate holder]]\"), \" and to create secure connections with web servers, email servers, or other applications.\"), mdx(\"p\", null, \"A PFX file can be generated from other certificate formats, such as .pvk, .spc, or .cer, using tools like Pvk2Pfx or Advanced Installer . A PFX file is password protected and can be imported or exported to different devices or platforms.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"","private":false},"tableOfContents":{"items":[{"url":"#pfx-file","title":"PFX file"}]},"outboundReferences":[{"contextLine":"A PFX file is a type of [[certificate]] file that contains both the public and private keys of a digital signature.","targetAnchor":null,"refWord":"certificate","target":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": \"certificate\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Certificate\"), mdx(\"p\", null, \"A certificate is a digital document that contains information about the identity and validity of a website or a server.\"), mdx(\"p\", null, \"It has a public key and a private key. This info is stored in a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/pfx-file\",\n    \"title\": \"pfx-file\"\n  }, \"[[pfx-file]]\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"id":"52a8cdd0-8dbc-5f9a-bf53-9038187e7539","fields":{"slug":"/general/certificate","title":"Certificate"}}}}],"inboundReferences":[{"contextLine":"* Upload a private certificate (it must be stored in a [[pfx-file]] and encrypted with [[triple-des]])","referrer":{"parent":{"id":"deb4e0d7-ee35-5448-920e-7a8b2d1acdab","fields":{"slug":"/azure/azure-app-service/configuring-azure-app-services","title":"Configuring Azure App Services"}}}},{"contextLine":"It has a public key and a private key. This info is stored in a [[pfx-file]].","referrer":{"parent":{"id":"52a8cdd0-8dbc-5f9a-bf53-9038187e7539","fields":{"slug":"/general/certificate","title":"Certificate"}}}}]},"fields":{"slug":"/general/pfx-file","title":"PFX file"}}},"pageContext":{"id":"bd1228f3-9937-5116-8a78-dc6df0fe18b2","refWordMdxSlugDict":{"certificate":"general/certificate","pfx-file":"general/pfx-file"},"tocTypes":["sidebar"]}},
    "staticQueryHashes": ["2221750479","2380733210","2768355698","63159454","847517413"]}